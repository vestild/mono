/* How to verify that we have assigned valid string message for every constant field:

 MONO_PATH=../lib/net_4_5/ ../../../runtime/mono-wrapper	\
  ../lib/net_4_5/csharp.exe -e "typeof (System.Xml.XmlReader)	\
  .Assembly.GetTypes ().Where (t => t.Name.EndsWith (\"Res\"))	\
  .SelectMany (type => type.GetFields () \
  .Where (f => f.Name == f.GetValue (null) as string)) \
  .Select (f => f.Name)"
*/

using System.Reflection;
using System.Runtime.CompilerServices;

namespace System.Xml.Utils
{
	class Res
	{
		public const string Xslt_OpenBracesAvt = "Attribute value template \"{0}\" is not closed by '}'";
		public const string Arg_IncompatibleParamType = "Type is incompatible.";
		public const string Coll_BadOptFormat = "bad collation option format: {0} ";
		public const string Coll_Unsupported = "Collation \"{0}\" is not supported.";
		public const string Coll_UnsupportedLanguage = "Collation for language  \"{0}\" is not supported.";
		public const string Coll_UnsupportedOpt = "Collation option \"{0}\" is not supported.";
		public const string Coll_UnsupportedOptVal = "Value \"{1}\" is not supported for collation option \"{0}\".";
		public const string Coll_UnsupportedSortOpt = "Sorting option \"{0}\" is not supported.";
		public const string Qil_Validation = "QIL validation error";
		public const string Sch_EnumFinished = "The enumerator has already reached at the end.";
		public const string Sch_EnumNotStarted = "The enumerator has not started yet.";
		public const string XPath_AtLeastNArgsExpected = "At least {1} arguments are expected for function \"{0}\".";
		public const string XPath_AtMostMArgsExpected = "For function \"{0}\", {1} to {2} arguments are expected.";
		public const string XPath_EofExpected = "End of XPath token is expected \"{0}\"";
		public const string XPath_InvalidAxisInPattern = "Invalid axis in pattern";
		public const string XPath_NArgsExpected = "{1} arguments are expected for function \"{0}\".";
		public const string XPath_NOrMArgsExpected = "For function \"{0}\", {1} or {2} arguments are expected.";
		public const string XPath_NodeSetArgumentExpected = "Node-set argument is expected for parameter \"{0}\" (at {1}).";
		public const string XPath_NodeSetExpected = "Node set is expected.";
		public const string XPath_NodeTestExpected = "Node test is expected.";
		public const string XPath_PredicateAfterDot = "Predicate appeared atfer \".\".";
		public const string XPath_PredicateAfterDotDot = "Predicate appeared after \"..\".";
		public const string XPath_RtfInPathExpr = "Result tree fragment appeared in path expression.";
		public const string XPath_ScientificNotation = "Invalid scientific notation in number.";
		public const string XPath_TokenExpected = "Token \"{0}\" is expected.";
		public const string XPath_UnclosedString = "String is not closed.";
		public const string XPath_UnexpectedToken = "Unexpected token {0}";
		public const string XmlIl_AmbiguousExtensionMethod = "Ambiguous extension method \"{1}\" in namespace \"{0}\" with {2} arguments are found.";
		public const string XmlIl_BadXmlState = "Invalid XML state transition from {0} to {1}.";
		public const string XmlIl_BadXmlStateAttr = "Invalid XML state transition in attribute.";
		public const string XmlIl_ByRefType = "Parameter of ByRef type is not supported. Found in function {0} in namespace {1}";
		public const string XmlIl_CantResolveEntity = "Cannot resolve entity \"{0}\" from data source of {1} type.";
		public const string XmlIl_CantStripNav = "Whitespaces cannot be stripped from XPath navigator.";
		public const string XmlIl_DocumentLoadError = "Could not load document '{0}'";
		public const string XmlIl_ExtensionError = "Error in XSLT extension function \"{0}\"";
		public const string XmlIl_GenericExtensionMethod = "Generic method is not supported for XSLT extension. Function \"{0}\" in namespace \"{1}\".";
		public const string XmlIl_NmspAfterAttr = "Namespace node appeared after attribute node.";
		public const string XmlIl_NmspConflict = "Conflicting namespace nodes appeared as xmlns{0}{1}=\"{2}\" while it is already mapped to \"{3}\".";
		public const string XmlIl_NoDefaultDocument = "Default document is not defined.";
		public const string XmlIl_NoExtensionMethod = "No method is found for extension function \"{0}\" in namespace \"{1}\" with {2} arguments.";
		public const string XmlIl_NonPublicExtensionMethod = "The specified method for extension function \"{0}\" in namespace \"{1}\" is not public.";
		public const string XmlIl_TooManyParameters = "Too many method parameters.";
		public const string XmlIl_TopLevelAttrNmsp = "Attribute or namespace node is being generated as the top level node.";
		public const string XmlIl_UnknownDocument = "Unknown document {0} is referenced.";
		public const string XmlIl_UnknownExtObj = "Unknown extension object in namespace {0} is referenced.";
		public const string XmlIl_UnknownParam = "Unknown parameter \"{0}\" in namespace \"{1}\" is referenced.";
		public const string Xml_EndOfInnerExceptionStack = "--- End of inner exception stack trace ---";
		public const string Xml_ErrorFilePosition = "File {0}, line {1}, position {2}.";
		public const string Xml_InvalidOperation = "Invalid XML operation has occured.";
		public const string Xml_UserException = "{0}";
		public const string Xslt_AnalyzeStringChildOrder = "Incorrect child element order in \"analyze-string\" element.";
		public const string Xslt_AnalyzeStringDupChild = "Duplicate child element in \"analyze-string\" element \"{0}\" is found.";
		public const string Xslt_AnalyzeStringEmpty = "Empty \"analyze-child\" element.";
		public const string Xslt_ApplyImports = "\"apply-imports\" is not available.";
		public const string Xslt_AssemblyNameHref = "Both assembly name and href are specified.";
		public const string Xslt_AttributeRedefinition = "Attribute redefinition is detected for \"{0}\".";
		public const string Xslt_BistateAttribute = "Attribute \"{0}\" accepts only \"{1}\" and \"{2}\" as the value.";
		public const string Xslt_BothMatchNameAbsent = "Both \"match\" and \"name\" attributes are absent. One of either is required.";
		public const string Xslt_CannotLoadStylesheet = "Cannot load stylesheet \"{0}\". The entity is {1}.";
		public const string Xslt_CantResolve = "Cannot resolve stylesheet \"{0}\".";
		public const string Xslt_CharAttribute = "Unexpected character in attribute \"{0}\".";
		public const string Xslt_CircularAttributeSet = "Attribute set \"{0}\" results in circular definition.";
		public const string Xslt_CircularInclude = "\"{0}\" is specified to be included, but it results in circular inclusion.";
		public const string Xslt_CircularReference = "Reference to \"{0}\" results in circular references.";
		public const string Xslt_CollationSyntax = "Cannot determine default collation.";
		public const string Xslt_CompileError2 = "XSLT compile error. See InnerException for details.";
		public const string Xslt_CurrentNotAllowed = "Call to current function is not allowed here.";
		public const string Xslt_DecimalFormatRedefined = "Decimal format symbol \"{0}\" is being redefined (as \"{1}\").";
		public const string Xslt_DecimalFormatSignsNotDistinct = "Each of number sign characters must be unique: \"{0}\" and \"{1}\"";
		public const string Xslt_DocumentFuncProhibited = "document function is prohibited";
		public const string Xslt_DupDecimalFormat = "decimal-format \"{0}\" has duplicate specification.";
		public const string Xslt_DupGlobalVariable = "Global variable \"{0}\" already exists.";
		public const string Xslt_DupLocalVariable = "Local variable \"{0}\" already exists.";
		public const string Xslt_DupNsAlias = "Namespace alias for \"{0}\" is already defined.";
		public const string Xslt_DupOtherwise = "More than one \"otherwise\" definition is found.";
		public const string Xslt_DupTemplateName = "Template \"{0}\" already exists.";
		public const string Xslt_DupVarName = "Variable \"{0}\" is already defined.";
		public const string Xslt_DuplicateWithParam = "\"with-param\" for \"{0}\" is already defined.";
		public const string Xslt_ElementCntSel = "Element \"{0}\" cannot have both \"select\" attribute and element content at the same time.";
		public const string Xslt_EmptyAttrValue = "Attribute \"{0}\" has empty value \"{1}\".";
		public const string Xslt_EmptyAvtExpr = "Attribute value template is empty: \"{0}\"";
		public const string Xslt_EmptyNsAlias = "Namespace alias for \"{0}\" is empty.";
		public const string Xslt_ExcludeDefault = "#default cannot be excluded.";
		public const string Xslt_InputTooComplex = "Too complicated XPath expression is detected.";
		public const string Xslt_InputTypeAnnotations = "Inconsistent \"input-type-annotations\" is specified.";
		public const string Xslt_InvalidApplyImports = "\"apply-imports\" is not applicable here.";
		public const string Xslt_InvalidAttrValue = "For attribute \"{0}\", value \"{1}\" is invalid.";
		public const string Xslt_InvalidAttribute = "Attribute \"{0}\" is invalid in element \"{1}\".";
		public const string Xslt_InvalidCallTemplate = "Invalid \"call-template\" to \"{0}\" is found.";
		public const string Xslt_InvalidCompareOption = "Invalid string comparison option \"{0}\" is specified.";
		public const string Xslt_InvalidContents = "Invalid contents in \"{0}\" element.";
		public const string Xslt_InvalidEncoding = "Invalid encoding name: \"{0}\".";
		public const string Xslt_InvalidExtensionNamespace = "Invalid extension namespace.";
		public const string Xslt_InvalidFormat = "Decimal format string is empty.";
		public const string Xslt_InvalidFormat1 = "Invalid decimal format string: \"{0}\".";
		public const string Xslt_InvalidFormat2 = "More than one decimal digit is found in decimal format string: \"{0}\"";
		public const string Xslt_InvalidFormat3 = "More than one pattern is found in decimal format string: \"{0}\"";
		public const string Xslt_InvalidFormat5 = "More than one decimal separator is found in decimal format string: \"{0}\"";
		public const string Xslt_InvalidFormat8 = "Pattern without preceding digit or zero-digit has appeared.";
		public const string Xslt_InvalidLanguage = "Language \"{0}\" is not supported.";
		public const string Xslt_InvalidMethod = "Output method \"{0}\" is not supported.";
		public const string Xslt_InvalidModeAttribute = "Template mode \"{0}\" is not supported.";
		public const string Xslt_InvalidPattern = "Invalid pattern match occured with \"{0}\".";
		public const string Xslt_InvalidPrefix = "Invalid XML prefix \"{0}\" is specified.";
		public const string Xslt_InvalidQName = "Invalid QName \"{0}\" is specified.";
		public const string Xslt_InvalidVariable = "Variable \"{0}\" could not be resolved.";
		public const string Xslt_InvalidXPath = "Invalid XPath was specified: \"{0}\".";
		public const string Xslt_ItemNull = "Item is null.";
		public const string Xslt_KeyCntUse = "XSLT \"key\" needs either \"use\" attribute or content.";
		public const string Xslt_KeyNotAllowed = "XSLT key is not allowed here.";
		public const string Xslt_MissingAttribute = "Mandatory attribute \"{0}\" is missing.";
		public const string Xslt_ModeListAll = "Only #default, #current and #all are the valid values in mode list.";
		public const string Xslt_ModeListDup = "Mode \"{0}\" is already specified in the list.";
		public const string Xslt_ModeListEmpty = "Mode list is empty.";
		public const string Xslt_ModeWithoutMatch    = "\"mode\" is specified while no \"match\" is specified.";
		public const string Xslt_MultipleRoots = "Multiple root element is being written for XML output.";
		public const string Xslt_NestedAvt = "Nested attribute value template is found: \"{0}\"";
		public const string Xslt_NoAttributeSet = "Specified attribute set \"{0}\" is not found.";
		public const string Xslt_NoDecimalFormat = "decimal format \"{0}\" is not found.";
		public const string Xslt_NoNavigatorConversion = "Argument cannot be converted to result tree fragment.";
		public const string Xslt_NoNodeSetConversion = "Argument cannot be converted to node set.";
		public const string Xslt_NoSelectNoContent = "Either \"select\" attribute or child node set is required in \"{0}\" element.";
		public const string Xslt_NoWhen = "No \"when\" element appreared.";
		public const string Xslt_NodeSetNotNode = "Node set contains no node.";
		public const string Xslt_NonTemplateTunnel = "Not suppoted use of template parameter tunnel: \"{0}\".";
		public const string Xslt_NotAtTop = "Node \"{0}\" is not at top level. Parent is \"{0}\".";
		public const string Xslt_NotEmptyContents = "Content is not supported in \"{0}\" element.";
		public const string Xslt_NotFirstImport = "Element \"import\" should be at first before other elements.";
		public const string Xslt_NotYetImplemented = "\"{0}\" is not implemented yet.";
		public const string Xslt_NullNsAtTopLevel = "\"null-namespace\" is not expected at top-level.";
		public const string Xslt_OpenLiteralAvt = "Literal in attribute value template \"{0}\" is not closed";
		public const string Xslt_PerformSortCntSel = "XSLT \"select\" element can only contain \"sort\" element.";
		public const string Xslt_PriorityWithoutMatch = "In template, \"priority\" attribute is specified without \"match\" attribute.";
		public const string Xslt_RequiredAndSelect = "Both \"required\" attribute and \"select\" attribute are specified in variable \"{0}\".";
		public const string Xslt_RequiredOnFunction = "Attribute \"required\" is not supported in \"{0}\".";
		public const string Xslt_ReservedNS = "\"{0}\" is a reserverd namespace.";
		public const string Xslt_SchemaAttribute = "Invalid schema attribute \"{0}\".";
		public const string Xslt_SchemaAttributeValue = "Invalid schema attribute value \"{1}\" for \"{1}\".";
		public const string Xslt_SchemaDeclaration = "Not supported schema declaration on \"{0}\" element.";
		public const string Xslt_ScriptAndExtensionClash = "MSXSL \"script\" and XSLT extension object conflict for \"{0}\" namespace.";
		public const string Xslt_ScriptCompileErrors = "Script compile error occurred: {0}";
		public const string Xslt_ScriptCompileException = "Could not start compiling script. There could be an issue in configuration, CodeDomProvider type, temporary file creation etc.";
		public const string Xslt_ScriptDub = "MSXSL script or extension object for namespace \"{0}\" already exists.";
		public const string Xslt_ScriptEmpty = "MSXSL script is empty.";
		public const string Xslt_ScriptInvalidLanguage = "\"{0}\" is an invalid script language.";
		public const string Xslt_ScriptInvalidPrefix = "Extension object for prefix \"{0}\" is not found.";
		public const string Xslt_ScriptMixedLanguages = "For namespace \"{0}\" you are using different language from another script, which is not supported.";
		public const string Xslt_ScriptNotAtTop = "element \"{0}\" should be a top-level child of \"script\" element.";
		public const string Xslt_ScriptXsltNamespace = "XSLT namespace cannot be used as a script namespace.";
		public const string Xslt_ScriptsProhibited = "MSXSL script is prohibited.";
		public const string Xslt_SingleRightAvt = "Single right brace '}' has appeared within attribute value template: \"{0}\".";
		public const string Xslt_SingleRightBraceInAvt = "Single right brace '}' has appeared outside attribute value template: \"{0}\". It must be escaped as \"}}\".";
		public const string Xslt_SortStable = "Attribute \"stable\" is applicable only to the first \"sort\" element.";
		public const string Xslt_TemplateNoAttrib = "Template has no name attribute.";
		public const string Xslt_Terminate = "Terminating with: {0}";
		public const string Xslt_TextNodesNotAllowed = "Text node is not allowed in {0} element.";
		public const string Xslt_UndefinedKey = "Key '{0}\" is undefined.";
		public const string Xslt_UnexpectedElement = "Element \"{0}\" is unexpected in {1} element.";
		public const string Xslt_UnexpectedKeyword = "\"{0}\" is unexpected in {1} element.";
		public const string Xslt_UnknownExtensionElement = "XSLT extension {0} is not found.";
		public const string Xslt_UnknownXsltFunction = "XSLT function {0} is not found.";
		public const string Xslt_UnsuppFunction = "XSLT function {0} is not supported.";
		public const string Xslt_UnsupportedClrType = "CLR type {0} is not supported.";
		public const string Xslt_UnsupportedXsltFunction = "XSLT function {0} is not supported.";
		public const string Xslt_VariableCntSel2 = "Variable declaration cannot have both \"select\" attribute and contents.";
		public const string Xslt_VariablesNotAllowed = "Variable cannot be referenced.";
		public const string Xslt_WarningAsError = "Treating warning as error: {0}";
		public const string Xslt_WdXslNamespace = "Specified namespace URI is for unsupported working draft version of XSLT.";
		public const string Xslt_WhenAfterOtherwise = "\"when\" element appeared after \"otherwise\" element.";
		public const string Xslt_WrongNumberArgs = "Wrong number of arguments for function \"{0}\": got {1}.";
		public const string Xslt_WrongStylesheetElement = "stylesheet element is not found.";
		public const string Xslt_XmlnsAttr = "\"xmlns\" is being written as an attribute node, using non-empty prefix and empty namespace.";

		public const string Xslt_CompileError = "XSLT compile error at {0}({1},{2}). See InnerException for details.";

		public static string GetString (string s, params object [] args)
		{
			return args == null || args.Length == 0 ? s : string.Format (s, args);
		}
	}
}

namespace System.Xml
{
	
	class Res 
	{
		public const string Xslt_IncompatibleCompiledStylesheetVersion = "Xslt_IncompatibleCompiledStylesheetVersion";
		public const string Xslt_NotCompiledStylesheet = "Xslt_NotCompiledStylesheet";
		public const string Xslt_NoStylesheetLoaded = "Xslt_NoStylesheetLoaded";
		public const string Arg_IncompatibleParamType = "Arg_IncompatibleParamType";

		public const string XmlPropertyReflectionError = "XmlPropertyReflectionError";
		public const string XPathDocument_SchemaSetNotAllowed = "XPathDocument_SchemaSetNotAllowed";
		public const string XPathDocument_MissingSchemas = "XPathDocument_MissingSchemas";
		public const string XPathDocument_NotEnoughSchemaInfo = "XPathDocument_NotEnoughSchemaInfo";
		public const string XPathDocument_ValidateInvalidNodeType = "XPathDocument_ValidateInvalidNodeType";
		public const string Xml_RecursiveParEntity = "Xml_RecursiveParEntity";
		public const string RefSyntaxNotSupportedForElements0 = "RefSyntaxNotSupportedForElements0";
		public const string Xml_ErrorOpeningExternalDtd = "Xml_ErrorOpeningExternalDtd";
		public const string Xml_CannotResolveEntityDtdIgnored = "Xml_CannotResolveEntityDtdIgnored";
		public const string Arg_ExpectingXmlTextReader = "The XmlReader passed in to construct this XmlValidatingReaderImpl must be an instance of a System.Xml.XmlTextReader.";
		public const string Arg_CannotCreateNode = "Cannot create node of type {0}.";
		public const string Xnr_ResolveEntity = "Xnr_ResolveEntity";
		public const string Enc_InvalidByteInEncoding = "Enc_InvalidByteInEncoding";
		/*
		public const string SqlCommandBuilder_DataAdapter = "SqlCommandBuilder_DataAdapter";
		public const string SqlCommand_Notification = "SqlCommand_Notification";
		public const string SqlCommand_NotificationAutoEnlist = "SqlCommand_NotificationAutoEnlist";
		public const string SqlConnection_ClientConnectionId = "SqlConnection_ClientConnectionId";
		public const string SqlConnection_ConnectionString = "SqlConnection_ConnectionString";
		public const string SqlConnection_ConnectionTimeout = "SqlConnection_ConnectionTimeout";
		public const string SqlConnection_Credential = "SqlConnection_Credential";
		public const string SqlConnection_DataSource = "SqlConnection_DataSource";
		public const string SqlConnection_Database = "SqlConnection_Database";
		public const string SqlConnection_PacketSize = "SqlConnection_PacketSize";
		public const string SqlConnection_ServerVersion = "SqlConnection_ServerVersion";
		public const string SqlConnection_StatisticsEnabled = "SqlConnection_StatisticsEnabled";
		public const string SqlConnection_WorkstationId = "SqlConnection_WorkstationId";
		public const string SqlConvert_ConvertFailed = "SqlConvert_ConvertFailed";
		public const string SqlDelegatedTransaction_PromotionFailed = "SqlDelegatedTransaction_PromotionFailed";
		public const string SqlDependency_AddCommandDependency = "SqlDependency_AddCommandDependency";
		public const string SqlDependency_DatabaseBrokerDisabled = "SqlDependency_DatabaseBrokerDisabled";
		public const string SqlDependency_DefaultOptionsButNoStart = "SqlDependency_DefaultOptionsButNoStart";
		public const string SqlDependency_DuplicateStart = "SqlDependency_DuplicateStart";
		public const string SqlDependency_EventNoDuplicate = "SqlDependency_EventNoDuplicate";
		public const string SqlDependency_HasChanges = "SqlDependency_HasChanges";
		public const string SqlDependency_Id = "SqlDependency_Id";
		public const string SqlDependency_IdMismatch = "SqlDependency_IdMismatch";
		public const string SqlDependency_InvalidTimeout = "SqlDependency_InvalidTimeout";
		public const string SqlDependency_NoMatchingServerDatabaseStart = "SqlDependency_NoMatchingServerDatabaseStart";
		public const string SqlDependency_NoMatchingServerStart = "SqlDependency_NoMatchingServerStart";
		public const string SqlDependency_OnChange = "SqlDependency_OnChange";
		public const string SqlFileStream_FileAlreadyInTransaction = "SqlFileStream_FileAlreadyInTransaction";
		public const string SqlFileStream_InvalidParameter = "SqlFileStream_InvalidParameter";
		public const string SqlFileStream_InvalidPath = "SqlFileStream_InvalidPath";
		public const string SqlFileStream_PathNotValidDiskResource = "SqlFileStream_PathNotValidDiskResource";
		public const string SqlMetaData_InvalidSqlDbTypeForConstructorFormat = "SqlMetaData_InvalidSqlDbTypeForConstructorFormat";
		public const string SqlMetaData_NameTooLong = "SqlMetaData_NameTooLong";
		public const string SqlMetaData_NoMetadata = "SqlMetaData_NoMetadata";
		public const string SqlMetaData_SpecifyBothSortOrderAndOrdinal = "SqlMetaData_SpecifyBothSortOrderAndOrdinal";
		public const string SqlMisc_AlreadyFilledMessage = "SqlMisc_AlreadyFilledMessage";
		public const string SqlMisc_ArithOverflowMessage = "SqlMisc_ArithOverflowMessage";
		public const string SqlMisc_BufferInsufficientMessage = "SqlMisc_BufferInsufficientMessage";
		public const string SqlMisc_ClosedXmlReaderMessage = "SqlMisc_ClosedXmlReaderMessage";
		public const string SqlMisc_CompareDiffCollationMessage = "SqlMisc_CompareDiffCollationMessage";
		public const string SqlMisc_ConcatDiffCollationMessage = "SqlMisc_ConcatDiffCollationMessage";
		public const string SqlMisc_ConversionOverflowMessage = "SqlMisc_ConversionOverflowMessage";
		public const string SqlMisc_DateTimeOverflowMessage = "SqlMisc_DateTimeOverflowMessage";
		public const string SqlMisc_DivideByZeroMessage = "SqlMisc_DivideByZeroMessage";
		public const string SqlMisc_FormatMessage = "SqlMisc_FormatMessage";
		public const string SqlMisc_InvalidArraySizeMessage = "SqlMisc_InvalidArraySizeMessage";
		public const string SqlMisc_InvalidDateTimeMessage = "SqlMisc_InvalidDateTimeMessage";
		public const string SqlMisc_InvalidFlagMessage = "SqlMisc_InvalidFlagMessage";
		public const string SqlMisc_InvalidOpStreamClosed = "SqlMisc_InvalidOpStreamClosed";
		public const string SqlMisc_InvalidOpStreamNonReadable = "SqlMisc_InvalidOpStreamNonReadable";
		public const string SqlMisc_InvalidOpStreamNonSeekable = "SqlMisc_InvalidOpStreamNonSeekable";
		public const string SqlMisc_InvalidOpStreamNonWritable = "SqlMisc_InvalidOpStreamNonWritable";
		public const string SqlMisc_InvalidPrecScaleMessage = "SqlMisc_InvalidPrecScaleMessage";
		public const string SqlMisc_MessageString = "SqlMisc_MessageString";
		public const string SqlMisc_NoBufferMessage = "SqlMisc_NoBufferMessage";
		public const string SqlMisc_NotFilledMessage = "SqlMisc_NotFilledMessage";
		public const string SqlMisc_NullString = "SqlMisc_NullString";
		public const string SqlMisc_NullValueMessage = "SqlMisc_NullValueMessage";
		public const string SqlMisc_NumeToDecOverflowMessage = "SqlMisc_NumeToDecOverflowMessage";
		public const string SqlMisc_SqlTypeMessage = "SqlMisc_SqlTypeMessage";
		public const string SqlMisc_StreamErrorMessage = "SqlMisc_StreamErrorMessage";
		public const string SqlMisc_SubclassMustOverride = "SqlMisc_SubclassMustOverride";
		public const string SqlMisc_TimeZoneSpecifiedMessage = "SqlMisc_TimeZoneSpecifiedMessage";
		public const string SqlMisc_TruncationMaxDataMessage = "SqlMisc_TruncationMaxDataMessage";
		public const string SqlMisc_TruncationMessage = "SqlMisc_TruncationMessage";
		public const string SqlMisc_WriteNonZeroOffsetOnNullMessage = "SqlMisc_WriteNonZeroOffsetOnNullMessage";
		public const string SqlMisc_WriteOffsetLargerThanLenMessage = "SqlMisc_WriteOffsetLargerThanLenMessage";
		public const string SqlNotify_SqlDepCannotBeCreatedInProc = "SqlNotify_SqlDepCannotBeCreatedInProc";
		public const string SqlParameter_DBNullNotSupportedForTVP = "SqlParameter_DBNullNotSupportedForTVP";
		public const string SqlParameter_InvalidTableDerivedPrecisionForTvp = "SqlParameter_InvalidTableDerivedPrecisionForTvp";
		public const string SqlParameter_ParameterName = "SqlParameter_ParameterName";
		public const string SqlParameter_SqlDbType = "SqlParameter_SqlDbType";
		public const string SqlParameter_UnexpectedTypeNameForNonStruct = "SqlParameter_UnexpectedTypeNameForNonStruct";
		public const string SqlParameter_UnsupportedTVPOutputParameter = "SqlParameter_UnsupportedTVPOutputParameter";
		public const string SqlParameter_XmlSchemaCollectionDatabase = "SqlParameter_XmlSchemaCollectionDatabase";
		public const string SqlParameter_XmlSchemaCollectionName = "SqlParameter_XmlSchemaCollectionName";
		public const string SqlParameter_XmlSchemaCollectionOwningSchema = "SqlParameter_XmlSchemaCollectionOwningSchema";
		public const string SqlPipe_AlreadyHasAnOpenResultSet = "SqlPipe_AlreadyHasAnOpenResultSet";
		public const string SqlPipe_CommandHookedUpToNonContextConnection = "SqlPipe_CommandHookedUpToNonContextConnection";
		public const string SqlPipe_DoesNotHaveAnOpenResultSet = "SqlPipe_DoesNotHaveAnOpenResultSet";
		public const string SqlPipe_IsBusy = "SqlPipe_IsBusy";
		public const string SqlPipe_MessageTooLong = "SqlPipe_MessageTooLong";
		public const string SqlProvider_DuplicateSortOrdinal = "SqlProvider_DuplicateSortOrdinal";
		public const string SqlProvider_InvalidDataColumnMaxLength = "SqlProvider_InvalidDataColumnMaxLength";
		public const string SqlProvider_InvalidDataColumnType = "SqlProvider_InvalidDataColumnType";
		public const string SqlProvider_MissingSortOrdinal = "SqlProvider_MissingSortOrdinal";
		public const string SqlProvider_NotEnoughColumnsInStructuredType = "SqlProvider_NotEnoughColumnsInStructuredType";
		public const string SqlProvider_SortOrdinalGreaterThanFieldCount = "SqlProvider_SortOrdinalGreaterThanFieldCount";
		*/
		public const string SqlTypes_ArithOverflow = "SqlTypes_ArithOverflow";
		public const string SqlTypes_ArithTruncation = "SqlTypes_ArithTruncation";
		public const string SqlTypes_DivideByZero = "SqlTypes_DivideByZero";
		public const string SqlUdtReason_NoUdtAttribute = "SqlUdtReason_NoUdtAttribute";
		public const string SqlUdt_InvalidUdtMessage = "SqlUdt_InvalidUdtMessage";
		public const string Sql_BulkLoadLcidMismatch = "Sql_BulkLoadLcidMismatch";
		public const string Sql_CanotCreateNormalizer = "Sql_CanotCreateNormalizer";
		public const string Sql_InternalError = "Sql_InternalError";
		public const string Sql_MismatchedMetaDataDirectionArrayLengths = "Sql_MismatchedMetaDataDirectionArrayLengths";
		public const string Sql_NullCommandText = "Sql_NullCommandText";
		public const string Xml_AsyncIsRunningException = "Xml_AsyncIsRunningException";
		public const string Xml_AttlistDuplEnumValue = "Xml_AttlistDuplEnumValue";
		public const string Xml_AttlistDuplNotationValue = "Xml_AttlistDuplNotationValue";
		public const string Xml_AttributeValues = "Xml_AttributeValues";
		public const string Xml_BadAttributeChar = "Xml_BadAttributeChar";
		public const string Xml_BadDTDLocation = "Xml_BadDTDLocation";
		public const string Xml_BadDecimalEntity = "Xml_BadDecimalEntity";
		public const string Xml_BadHexEntity = "Xml_BadHexEntity";
		public const string Xml_BadNameChar = "The '{0}' character, hexadecimal value {1}, cannot be included in a name.";
		public const string Xml_BadNameCharWithPos = "Xml_BadNameCharWithPos";
		public const string Xml_BadNamespaceDecl = "Xml_BadNamespaceDecl";
		public const string Xml_BadStartNameChar = "Name cannot begin with the '{0}' character, hexadecimal value {1}.";
		public const string Xml_CDATAEndInText = "Xml_CDATAEndInText";
		public const string Xml_CanNotBindToReservedNamespace = "Cannot bind to the reserved namespace.";
		public const string Xml_CanNotDeserializeObjectType = "Xml_CanNotDeserializeObjectType";
		public const string Xml_CannotConvert = "Xml_CannotConvert";
		public const string Xml_CannotInstantiateAbstract = "Xml_CannotInstantiateAbstract";
		public const string Xml_CannotResolveEntity = "Xml_CannotResolveEntity";
		public const string Xml_CannotResolveExternalSubset = "Xml_CannotResolveExternalSubset";
		public const string Xml_CannotResolveUrl = "Xml_CannotResolveUrl";
		public const string Xml_CannotStartDocumentOnFragment = "WriteStartDocument cannot be called on writers created with ConformanceLevel.Fragment.";
		public const string Xml_CannotWriteXmlDecl = "Cannot write XML declaration. XML declaration can be only at the beginning of the document.";
		public const string Xml_CharEntityOverflow = "Xml_CharEntityOverflow";
		public const string Xml_CircularComplexType = "Xml_CircularComplexType";
		public const string Xml_Closed = "The Writer is closed.";
		public const string Xml_ClosedOrError = "The Writer is closed or in error state.";
		public const string Xml_ClosedOrErrorReader = "Xml_ClosedOrErrorReader";
		public const string Xml_ColonInLocalName = "Xml_ColonInLocalName";
		public const string Xml_ColumnConflict = "Xml_ColumnConflict";
		public const string Xml_ConformanceLevelFragment = "Make sure that the ConformanceLevel setting is set to ConformanceLevel.Fragment or ConformanceLevel.Auto if you want to write an XML fragment.";
		public const string Xml_DataTableInferenceNotSupported = "Xml_DataTableInferenceNotSupported";
		public const string Xml_DatatypeNotDefined = "Xml_DatatypeNotDefined";
		public const string Xml_DefaultException = "Xml_DefaultException";
		public const string Xml_DoubleBaseUri = "Xml_DoubleBaseUri";
		public const string Xml_DtdAfterRootElement = "Xml_DtdAfterRootElement";
		public const string Xml_DtdAlreadyWritten = "The DTD has already been written out.";
		public const string Xml_DtdIsProhibited = "Xml_DtdIsProhibited";
		public const string Xml_DtdIsProhibitedEx = "Xml_DtdIsProhibitedEx";
		public const string Xml_DtdNotAllowedInFragment = "DTD is not allowed in XML fragments.";
		public const string Xml_DupAttributeName = "'{0}' is a duplicate attribute name.";
		public const string Xml_DupXmlDecl = "Cannot write XML declaration. WriteStartDocument method has already written it.";
		public const string Xml_DuplicateConstraint = "Xml_DuplicateConstraint";
		public const string Xml_DynamicWithoutXmlSerializable = "Xml_DynamicWithoutXmlSerializable";
		public const string Xml_ElementNotFound = "Xml_ElementNotFound";
		public const string Xml_ElementNotFoundNs = "Xml_ElementNotFoundNs";
		public const string Xml_ElementTypeNotFound = "Xml_ElementTypeNotFound";
		public const string Xml_EmptyLocalName = "The empty string '' is not a valid local name.";
		public const string Xml_EmptyName = "The empty string '' is not a valid name.";
		public const string Xml_EmptyUrl = "Xml_EmptyUrl";
		public const string Xml_EncodingSwitchAfterResetState = "Xml_EncodingSwitchAfterResetState";
		public const string Xml_EndOfInnerExceptionStack = "Xml_EndOfInnerExceptionStack";
		public const string Xml_EntityHandling = "Xml_EntityHandling";
		public const string Xml_EntityRefNesting = "Xml_EntityRefNesting";
		public const string Xml_EnumerationRequired = "Xml_EnumerationRequired";
		public const string Xml_ErrorFilePosition = "Xml_ErrorFilePosition";
		public const string Xml_ErrorOpeningExternalEntity = "Xml_ErrorOpeningExternalEntity";
		public const string Xml_ErrorParsingEntityName = "Xml_ErrorParsingEntityName";
		public const string Xml_ErrorPosition = "Line {0}, position {1}.";
		public const string Xml_ExpectAttType = "Xml_ExpectAttType";
		public const string Xml_ExpectDtdMarkup = "Xml_ExpectDtdMarkup";
		public const string Xml_ExpectExternalIdOrEntityValue = "Xml_ExpectExternalIdOrEntityValue";
		public const string Xml_ExpectExternalOrClose = "Xml_ExpectExternalOrClose";
		public const string Xml_ExpectExternalOrPublicId = "Xml_ExpectExternalOrPublicId";
		public const string Xml_ExpectIgnoreOrInclude = "Xml_ExpectIgnoreOrInclude";
		public const string Xml_ExpectNoWhitespace = "Xml_ExpectNoWhitespace";
		public const string Xml_ExpectOp = "Xml_ExpectOp";
		public const string Xml_ExpectPcData = "Xml_ExpectPcData";
		public const string Xml_ExpectSubOrClose = "Xml_ExpectSubOrClose";
		public const string Xml_ExpectingWhiteSpace = "Xml_ExpectingWhiteSpace";
		public const string Xml_ExternalEntityInAttValue = "Xml_ExternalEntityInAttValue";
		public const string Xml_ExternalEntityInStandAloneDocument = "Xml_ExternalEntityInStandAloneDocument";
		public const string Xml_FoundEntity = "Xml_FoundEntity";
		public const string Xml_FragmentId = "Xml_FragmentId";
		public const string Xml_IncompatibleConformanceLevel = "Xml_IncompatibleConformanceLevel";
		public const string Xml_IncompleteDtdContent = "Xml_IncompleteDtdContent";
		public const string Xml_IncompleteEntity = "Xml_IncompleteEntity";
		public const string Xml_IndentCharsNotWhitespace = "Xml_IndentCharsNotWhitespace";
		public const string Xml_InternalError = "Xml_InternalError";
		public const string Xml_InvalidAttributeType = "Xml_InvalidAttributeType";
		public const string Xml_InvalidAttributeType1 = "Xml_InvalidAttributeType1";
		public const string Xml_InvalidBase64Value = "'{0}' is not a valid Base64 text sequence.";
		public const string Xml_InvalidBinHexValue = "'{0}' is not a valid BinHex text sequence.";
		public const string Xml_InvalidBinHexValueOddCount = "'{0}' is not a valid BinHex text sequence. The sequence must contain an even number of characters.";
		public const string Xml_InvalidCDataChars = "Cannot have ']]&gt;' inside an XML CDATA block.";
		public const string Xml_InvalidCharInThisEncoding = "Xml_InvalidCharInThisEncoding";
		public const string Xml_InvalidCharacter = "'{0}', hexadecimal value {1}, is an invalid character.";
		public const string Xml_InvalidCharsInIndent = "Xml_InvalidCharsInIndent";
		public const string Xml_InvalidCommentChars = "An XML comment cannot contain '--', and '-' cannot be the last character.";
		public const string Xml_InvalidConditionalSection = "Xml_InvalidConditionalSection";
		public const string Xml_InvalidContentModel = "Xml_InvalidContentModel";
		public const string Xml_InvalidField = "Xml_InvalidField";
		public const string Xml_InvalidIndentation = "Indentation value must be greater than 0.";
		public const string Xml_InvalidKey = "Xml_InvalidKey";
		public const string Xml_InvalidNameChars = "Invalid name character in '{0}'.";
		public const string Xml_InvalidNameCharsDetail = "Invalid name character in '{0}'. The '{1}' character, hexadecimal value {2}, cannot be included in a name.";
		public const string Xml_InvalidNmToken = "Xml_InvalidNmToken";
		public const string Xml_InvalidNodeType = "'{0}' is an invalid XmlNodeType.";
		public const string Xml_InvalidOperation = "Operation is not valid due to the current state of the object.";
		public const string Xml_InvalidPIName = "'{0}' is an invalid name for processing instructions.";
		public const string Xml_InvalidParEntityRef = "Xml_InvalidParEntityRef";
		public const string Xml_InvalidPiChars = "Cannot have '?&gt;' inside an XML processing instruction.";
		public const string Xml_InvalidPosition = "Xml_InvalidPosition";
		public const string Xml_InvalidPrefix = "Prefixes beginning with \"xml\" (regardless of whether the characters are uppercase, lowercase, or some combination thereof) are reserved for use by XML.";
		public const string Xml_InvalidQuote = "Invalid XML attribute quote character. Valid attribute quote characters are ' and \".";
		public const string Xml_InvalidReadContentAs = "The {0} method is not supported on node type {1}. If you want to read typed content of an element, use the ReadElementContentAs method.";
		public const string Xml_InvalidReadElementContentAs = "The {0} method is not supported on node type {1}.";
		public const string Xml_InvalidReadValueChunk = "Xml_InvalidReadValueChunk";
		public const string Xml_InvalidResetStateCall = "Xml_InvalidResetStateCall";
		public const string Xml_InvalidRootData = "Xml_InvalidRootData";
		public const string Xml_InvalidSelector = "Xml_InvalidSelector";
		public const string Xml_InvalidSurrogateHighChar = "Invalid high surrogate character (0x{0}). A high surrogate character must have a value from range (0xD800 - 0xDBFF).";
		public const string Xml_InvalidSurrogateMissingLowChar = "The surrogate pair is invalid. Missing a low surrogate character.";
		public const string Xml_InvalidSurrogatePairWithArgs = "The surrogate pair (0x{0}, 0x{1}) is invalid. A high surrogate character (0xD800 - 0xDBFF) must always be paired with a low surrogate character (0xDC00 - 0xDFFF).";
		public const string Xml_InvalidTextDecl = "Xml_InvalidTextDecl";
		public const string Xml_InvalidVersionNumber = "Xml_InvalidVersionNumber";
		public const string Xml_InvalidWhitespaceCharacter = "Xml_InvalidWhitespaceCharacter";
		public const string Xml_InvalidXmlDecl = "Xml_InvalidXmlDecl";
		public const string Xml_InvalidXmlDocument = "Xml_InvalidXmlDocument";
		public const string Xml_InvalidXmlSpace = "'{0}' is an invalid xml:space value.";
		public const string Xml_IsDataSetAttributeMissingInSchema = "Xml_IsDataSetAttributeMissingInSchema";
		public const string Xml_LimitExceeded = "Xml_LimitExceeded";
		public const string Xml_MergeDuplicateDeclaration = "Xml_MergeDuplicateDeclaration";
		public const string Xml_MessageWithErrorPosition = "{0} Line {1}, position {2}.";
		public const string Xml_MismatchKeyLength = "Xml_MismatchKeyLength";
		public const string Xml_MissingAttribute = "Xml_MissingAttribute";
		public const string Xml_MissingByteOrderMark = "Xml_MissingByteOrderMark";
		public const string Xml_MissingRefer = "Xml_MissingRefer";
		public const string Xml_MissingRoot = "Xml_MissingRoot";
		public const string Xml_MissingSQL = "Xml_MissingSQL";
		public const string Xml_MissingTable = "Xml_MissingTable";
		public const string Xml_MixedReadElementContentAs = "Xml_MixedReadElementContentAs";
		public const string Xml_MixingBinaryContentMethods = "ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadElementContentAsBase64 and ReadElementContentAsBinHex.";
		public const string Xml_MixingReadValueChunkWithBinary = "Xml_MixingReadValueChunkWithBinary";
		public const string Xml_MixingV1StreamingWithV2Binary = "Xml_MixingV1StreamingWithV2Binary";
		public const string Xml_MultipleDTDsProvided = "Xml_MultipleDTDsProvided";
		public const string Xml_MultipleParentRows = "Xml_MultipleParentRows";
		public const string Xml_MultipleRoots = "Xml_MultipleRoots";
		public const string Xml_MultipleTargetConverterEmpty = "Xml_MultipleTargetConverterEmpty";
		public const string Xml_MultipleValidaitonTypes = "Xml_MultipleValidaitonTypes";
		public const string Xml_NamespaceDeclXmlXmlns = "Prefix '{0}' cannot be mapped to namespace name reserved for \"xml\" or \"xmlns\".";
		public const string Xml_NametableMismatch = "Xml_NametableMismatch";
		public const string Xml_NestedCircular = "Xml_NestedCircular";
		public const string Xml_NoDTDPresent = "Xml_NoDTDPresent";
		public const string Xml_NoMultipleRoots = "Xml_NoMultipleRoots";
		public const string Xml_NoNamespaces = "Cannot set the namespace if Namespaces is 'false'.";
		public const string Xml_NoRoot = "Document does not have a root element.";
		public const string Xml_NoStartTag = "There was no XML start tag open.";
		public const string Xml_NoValidation = "Xml_NoValidation";
		public const string Xml_NonWhitespace = "Only white space characters should be used.";
		public const string Xml_NotEnoughSpaceForSurrogatePair = "Xml_NotEnoughSpaceForSurrogatePair";
		public const string Xml_NotInWriteState = "Xml_NotInWriteState";
		public const string Xml_NotSameNametable = "Xml_NotSameNametable";
		public const string Xml_NotTheFirst = "WriteStartDocument needs to be the first call.";
		public const string Xml_NullResolver = "Resolving of external URIs was prohibited.";
		public const string Xml_PartialContentNodeTypeNotSupportedEx = "Xml_PartialContentNodeTypeNotSupportedEx";
		public const string Xml_PolymorphismNotSupported = "Xml_PolymorphismNotSupported";
		public const string Xml_PrefixForEmptyNs = "Cannot use a prefix with an empty namespace.";
		public const string Xml_ReadBinaryContentNotSupported = "Xml_ReadBinaryContentNotSupported";
		public const string Xml_ReadContentAsFormatException = "Xml_ReadContentAsFormatException";
		public const string Xml_ReadOnlyProperty = "Xml_ReadOnlyProperty";
		public const string Xml_ReadSubtreeNotOnElement = "Xml_ReadSubtreeNotOnElement";
		public const string Xml_ReadValueChunkNotSupported = "Xml_ReadValueChunkNotSupported";
		public const string Xml_ReaderAsyncNotSetException = "Xml_ReaderAsyncNotSetException";
		public const string Xml_RecursiveGenEntity = "Xml_RecursiveGenEntity";
		public const string Xml_RedefinePrefix = "The prefix '{0}' cannot be redefined from '{1}' to '{2}' within the same start element tag.";
		public const string Xml_RelationChildKeyMissing = "Xml_RelationChildKeyMissing";
		public const string Xml_RelationChildNameMissing = "Xml_RelationChildNameMissing";
		public const string Xml_RelationParentNameMissing = "Xml_RelationParentNameMissing";
		public const string Xml_RelationTableKeyMissing = "Xml_RelationTableKeyMissing";
		public const string Xml_RelativeUriNotSupported = "Relative URIs are not supported.";
		public const string Xml_SimpleTypeNotSupported = "Xml_SimpleTypeNotSupported";
		public const string Xml_StackOverflow = "Xml_StackOverflow";
		public const string Xml_SurrogatePairSplit = "The second character surrogate pair is not in the input buffer to be written.";
		public const string Xml_TagMismatchEx = "'{0}' is expected.";
		public const string Xml_TooManyIsDataSetAtributeInSchema = "Xml_TooManyIsDataSetAtributeInSchema";
		public const string Xml_UnclosedConditionalSection = "Xml_UnclosedConditionalSection";
		public const string Xml_UnclosedQuote = "Xml_UnclosedQuote";
		public const string Xml_UndeclaredEntity = "Xml_UndeclaredEntity";
		public const string Xml_UndeclaredParEntity = "Reference to undeclared parameter entity '{0}'.";
		public const string Xml_UndefNamespace = "The '{0}' namespace is not defined.";
		public const string Xml_UndefPrefix = "An undefined prefix is in use.";
		public const string Xml_UndefinedDatatype = "Xml_UndefinedDatatype";
		public const string Xml_UnexpectedCDataEnd = "Xml_UnexpectedCDataEnd";
		public const string Xml_UnexpectedEOF = "Xml_UnexpectedEOF";
		public const string Xml_UnexpectedEOF1 = "Xml_UnexpectedEOF1";
		public const string Xml_UnexpectedEOFInElementContent = "Xml_UnexpectedEOFInElementContent";
		public const string Xml_UnexpectedEndTag = "Xml_UnexpectedEndTag";
		public const string Xml_UnexpectedNodeInSimpleContent = "Xml_UnexpectedNodeInSimpleContent";
		public const string Xml_UnexpectedNodeType = "Unexpected XmlNodeType: '{0}'.";
		public const string Xml_UnexpectedToken = "Xml_UnexpectedToken";
		public const string Xml_UnexpectedTokenEx = "Xml_UnexpectedTokenEx";
		public const string Xml_UnexpectedTokens2 = "Xml_UnexpectedTokens2";
		public const string Xml_UnknownEncoding = "Xml_UnknownEncoding";
		public const string Xml_UnknownNs = "Xml_UnknownNs";
		public const string Xml_UnparsedEntityRef = "Xml_UnparsedEntityRef";
		public const string Xml_UnsupportedClass = "Object type is not supported.";
		public const string Xml_UntrustedCodeSettingResolver = "XmlResolver can be set only by fully trusted code.";
		public const string Xml_UserException = "{0}";
		public const string Xml_ValueOutOfRange = "Xml_ValueOutOfRange";
		public const string Xml_WhitespaceHandling = "Xml_WhitespaceHandling";
		public const string Xml_WriterAsyncNotSetException = "Xml_WriterAsyncNotSetException";
		public const string Xml_WrongToken = "Token {0} in state {1} would result in an invalid XML document.";
		public const string Xml_XapResolverCannotOpenUri = "Xml_XapResolverCannotOpenUri";
		public const string Xml_XmlDeclNotFirst = "Cannot insert specified type of node as a child of this node.";
		public const string Xml_XmlPrefix = "Prefix \"xml\" is reserved for use by XML and can be mapped only to namespace name \"http://www.w3.org/XML/1998/namespace\".";
		public const string Xml_XmlnsBelongsToReservedNs = "The 'xmlns' attribute is bound to the reserved namespace 'http://www.w3.org/2000/xmlns/'.";
		public const string Xml_XmlnsPrefix = "Prefix \"xmlns\" is reserved for use by XML.";
		public const string XmlAbstractType = "XmlAbstractType";
		public const string XmlAnonymousBaseType = "XmlAnonymousBaseType";
		public const string XmlAnonymousInclude = "XmlAnonymousInclude";
		public const string XmlAnyElementDuplicate = "XmlAnyElementDuplicate";
		public const string XmlArrayItemAmbiguousTypes = "XmlArrayItemAmbiguousTypes";
		public const string XmlAttributeHasNoName = "XmlAttributeHasNoName";
		public const string XmlAttributeSetAgain = "XmlAttributeSetAgain";
		public const string XmlBadBaseElement = "XmlBadBaseElement";
		public const string XmlBadBaseType = "XmlBadBaseType";
		public const string XmlBadName = "A node of type '{0}' cannot have the name '{1}'.";
		public const string XmlBareAttributeMember = "XmlBareAttributeMember";
		public const string XmlBareTextMember = "XmlBareTextMember";
		public const string XmlBin_InvalidQNameID = "XmlBin_InvalidQNameID";
		public const string XmlBin_MissingEndCDATA = "XmlBin_MissingEndCDATA";
		public const string XmlBinary_AttrWithNsNoPrefix = "XmlBinary_AttrWithNsNoPrefix";
		public const string XmlBinary_CastNotSupported = "XmlBinary_CastNotSupported";
		public const string XmlBinary_InvalidProtocolVersion = "XmlBinary_InvalidProtocolVersion";
		public const string XmlBinary_InvalidSignature = "XmlBinary_InvalidSignature";
		public const string XmlBinary_InvalidSqlDecimal = "XmlBinary_InvalidSqlDecimal";
		public const string XmlBinary_InvalidStandalone = "XmlBinary_InvalidStandalone";
		public const string XmlBinary_ListsOfValuesNotSupported = "XmlBinary_ListsOfValuesNotSupported";
		public const string XmlBinary_NoParserContext = "XmlBinary_NoParserContext";
		public const string XmlBinary_NoRemapPrefix = "XmlBinary_NoRemapPrefix";
		public const string XmlBinary_UnexpectedToken = "XmlBinary_UnexpectedToken";
		public const string XmlBinary_UnsupportedCodePage = "XmlBinary_UnsupportedCodePage";
		public const string XmlBinary_ValueTooBig = "XmlBinary_ValueTooBig";
		public const string XmlCannotIncludeInSchema = "XmlCannotIncludeInSchema";
		public const string XmlCannotReconcileAccessor = "XmlCannotReconcileAccessor";
		public const string XmlCannotReconcileAccessorDefault = "XmlCannotReconcileAccessorDefault";
		public const string XmlCannotReconcileAttributeAccessor = "XmlCannotReconcileAttributeAccessor";
		public const string XmlChoiceIdDuplicate = "XmlChoiceIdDuplicate";
		public const string XmlChoiceIdentiferAmbiguous = "XmlChoiceIdentiferAmbiguous";
		public const string XmlChoiceIdentiferMemberMissing = "XmlChoiceIdentiferMemberMissing";
		public const string XmlChoiceIdentiferMissing = "XmlChoiceIdentiferMissing";
		public const string XmlChoiceIdentifierArrayType = "XmlChoiceIdentifierArrayType";
		public const string XmlChoiceIdentifierMismatch = "XmlChoiceIdentifierMismatch";
		public const string XmlChoiceIdentifierType = "XmlChoiceIdentifierType";
		public const string XmlChoiceIdentifierTypeEnum = "XmlChoiceIdentifierTypeEnum";
		public const string XmlChoiceMismatchChoiceException = "XmlChoiceMismatchChoiceException";
		public const string XmlChoiceMissingAnyValue = "XmlChoiceMissingAnyValue";
		public const string XmlChoiceMissingValue = "XmlChoiceMissingValue";
		public const string XmlCircularDerivation = "XmlCircularDerivation";
		public const string XmlCircularGroupReference = "XmlCircularGroupReference";
		public const string XmlCircularReference = "XmlCircularReference";
		public const string XmlCircularReference2 = "XmlCircularReference2";
		public const string XmlCircularTypeReference = "XmlCircularTypeReference";
		public const string XmlCodegenWarningDetails = "XmlCodegenWarningDetails";
		public const string XmlCompilerError = "XmlCompilerError";
		public const string XmlConfigurationDuplicateExtension = "XmlConfigurationDuplicateExtension";
		public const string XmlConstructorHasSecurityAttributes = "XmlConstructorHasSecurityAttributes";
		public const string XmlConstructorInaccessible = "XmlConstructorInaccessible";
		public const string XmlConvert_BadFormat = "The string '{0}' is not a valid {1} value.";
		public const string XmlConvert_BadUri = "The string was not recognized as a valid Uri.";
		public const string XmlConvert_NotOneCharString = "String must be exactly one character long.";
		public const string XmlConvert_Overflow = "Value '{0}' was either too large or too small for {1}.";
		public const string XmlConvert_TypeBadMapping = "Xml type '{0}' does not support Clr type '{1}'.";
		public const string XmlConvert_TypeBadMapping2 = "Xml type '{0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.";
		public const string XmlConvert_TypeFromString = "Xml type '{0}' cannot convert to Clr type '{1}' unless the source value is a String or an XmlAtomicValue.";
		public const string XmlConvert_TypeListBadMapping = "Xml type 'List of {0}' does not support Clr type '{1}'.";
		public const string XmlConvert_TypeListBadMapping2 = "Xml type 'List of {0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.";
		public const string XmlConvert_TypeNoNamespace = "The String '{0}' cannot be represented as an XmlQualifiedName.  A namespace for prefix '{1}' cannot be found.";
		public const string XmlConvert_TypeNoPrefix = "The QName '{0}' cannot be represented as a String.  A prefix for namespace '{1}' cannot be found.";
		public const string XmlConvert_TypeToString = "Cannot convert type '{0}' to String.";
		public const string XmlDataBinding_NoSchemaType = "XmlDataBinding_NoSchemaType";
		public const string XmlDataBinding_XPathAttrLast = "XmlDataBinding_XPathAttrLast";
		public const string XmlDataBinding_XPathAttrNotFirst = "XmlDataBinding_XPathAttrNotFirst";
		public const string XmlDataBinding_XPathEnd = "XmlDataBinding_XPathEnd";
		public const string XmlDataBinding_XPathRequireSlash = "XmlDataBinding_XPathRequireSlash";
		public const string XmlDataTypeMismatch = "XmlDataTypeMismatch";
		public const string XmlDisallowNegativeValues = "XmlDisallowNegativeValues";
		public const string XmlDocument_NoNodeSchemaInfo = "XmlDocument_NoNodeSchemaInfo";
		public const string XmlDocument_NoSchemaInfo = "XmlDocument_NoSchemaInfo";
		public const string XmlDocument_NodeNotFromDocument = "XmlDocument_NodeNotFromDocument";
		public const string XmlDocument_ValidateInvalidNodeType = "XmlDocument_ValidateInvalidNodeType";
		public const string XmlDropArrayAttributeValue = "XmlDropArrayAttributeValue";
		public const string XmlDropAttributeValue = "XmlDropAttributeValue";
		public const string XmlDropDefaultAttribute = "XmlDropDefaultAttribute";
		public const string XmlDropNonPrimitiveAttributeValue = "XmlDropNonPrimitiveAttributeValue";
		public const string XmlDuplicateAttributeName = "XmlDuplicateAttributeName";
		public const string XmlDuplicateElementInScope = "XmlDuplicateElementInScope";
		public const string XmlDuplicateElementInScope1 = "XmlDuplicateElementInScope1";
		public const string XmlDuplicateElementName = "XmlDuplicateElementName";
		public const string XmlDuplicateNamespace = "XmlDuplicateNamespace";
		public const string XmlDuplicateNs = "XmlDuplicateNs";
		public const string XmlDuplicateTypeName = "XmlDuplicateTypeName";
		public const string XmlElementHasNoName = "XmlElementHasNoName";
		public const string XmlElementImportedTwice = "XmlElementImportedTwice";
		public const string XmlElementMissingType = "XmlElementMissingType";
		public const string XmlElementNameMismatch = "XmlElementNameMismatch";
		public const string XmlEmptyArrayType = "XmlEmptyArrayType";
		public const string XmlExtensionComment = "XmlExtensionComment";
		public const string XmlExtensionDuplicateDefinition = "XmlExtensionDuplicateDefinition";
		public const string XmlFieldReflectionError = "XmlFieldReflectionError";
		public const string XmlGenError = "XmlGenError";
		public const string XmlGetSchemaEmptyTypeName = "XmlGetSchemaEmptyTypeName";
		public const string XmlGetSchemaInclude = "XmlGetSchemaInclude";
		public const string XmlGetSchemaMethodMissing = "XmlGetSchemaMethodMissing";
		public const string XmlGetSchemaMethodName = "XmlGetSchemaMethodName";
		public const string XmlGetSchemaMethodReturnType = "XmlGetSchemaMethodReturnType";
		public const string XmlGetSchemaTypeMissing = "XmlGetSchemaTypeMissing";
		public const string XmlHiddenMember = "XmlHiddenMember";
		public const string XmlIdentityAccessDenied = "XmlIdentityAccessDenied";
		public const string XmlIl_AmbiguousExtensionMethod = "XmlIl_AmbiguousExtensionMethod";
		public const string XmlIl_BadXmlState = "XmlIl_BadXmlState";
		public const string XmlIl_BadXmlStateAttr = "XmlIl_BadXmlStateAttr";
		public const string XmlIl_ByRefType = "XmlIl_ByRefType";
		public const string XmlIl_CantResolveEntity = "XmlIl_CantResolveEntity";
		public const string XmlIl_CantStripNav = "XmlIl_CantStripNav";
		public const string XmlIl_DocumentLoadError = "XmlIl_DocumentLoadError";
		public const string XmlIl_ExtensionError = "XmlIl_ExtensionError";
		public const string XmlIl_GenericExtensionMethod = "XmlIl_GenericExtensionMethod";
		public const string XmlIl_NmspAfterAttr = "XmlIl_NmspAfterAttr";
		public const string XmlIl_NmspConflict = "XmlIl_NmspConflict";
		public const string XmlIl_NoDefaultDocument = "XmlIl_NoDefaultDocument";
		public const string XmlIl_NoExtensionMethod = "XmlIl_NoExtensionMethod";
		public const string XmlIl_NonPublicExtensionMethod = "XmlIl_NonPublicExtensionMethod";
		public const string XmlIl_TooManyParameters = "XmlIl_TooManyParameters";
		public const string XmlIl_TopLevelAttrNmsp = "XmlIl_TopLevelAttrNmsp";
		public const string XmlIl_UnknownDocument = "XmlIl_UnknownDocument";
		public const string XmlIl_UnknownExtObj = "XmlIl_UnknownExtObj";
		public const string XmlIl_UnknownParam = "XmlIl_UnknownParam";
		public const string XmlIllegalAnyElement = "XmlIllegalAnyElement";
		public const string XmlIllegalArrayArrayAttribute = "XmlIllegalArrayArrayAttribute";
		public const string XmlIllegalArrayElement = "XmlIllegalArrayElement";
		public const string XmlIllegalArrayTextAttribute = "XmlIllegalArrayTextAttribute";
		public const string XmlIllegalAttrOrText = "XmlIllegalAttrOrText";
		public const string XmlIllegalAttrOrTextInterface = "XmlIllegalAttrOrTextInterface";
		public const string XmlIllegalAttribute = "XmlIllegalAttribute";
		public const string XmlIllegalAttributeFlagsArray = "XmlIllegalAttributeFlagsArray";
		public const string XmlIllegalAttributesArrayAttribute = "XmlIllegalAttributesArrayAttribute";
		public const string XmlIllegalDefault = "XmlIllegalDefault";
		public const string XmlIllegalElementsArrayAttribute = "XmlIllegalElementsArrayAttribute";
		public const string XmlIllegalForm = "XmlIllegalForm";
		public const string XmlIllegalMultipleText = "XmlIllegalMultipleText";
		public const string XmlIllegalMultipleTextMembers = "XmlIllegalMultipleTextMembers";
		public const string XmlIllegalOverride = "XmlIllegalOverride";
		public const string XmlIllegalSimpleContentExtension = "XmlIllegalSimpleContentExtension";
		public const string XmlIllegalSoapAttribute = "XmlIllegalSoapAttribute";
		public const string XmlIllegalType = "XmlIllegalType";
		public const string XmlIllegalTypeContext = "XmlIllegalTypeContext";
		public const string XmlIllegalTypedTextAttribute = "XmlIllegalTypedTextAttribute";
		public const string XmlIllegalWildcard = "XmlIllegalWildcard";
		public const string XmlImporterExtensionBadLocalTypeName = "XmlImporterExtensionBadLocalTypeName";
		public const string XmlImporterExtensionBadTypeName = "XmlImporterExtensionBadTypeName";
		public const string XmlInternalError = "XmlInternalError";
		public const string XmlInternalErrorDetails = "XmlInternalErrorDetails";
		public const string XmlInternalErrorMethod = "XmlInternalErrorMethod";
		public const string XmlInternalErrorReaderAdvance = "XmlInternalErrorReaderAdvance";
		public const string XmlInvalidAnyAttributeUse = "XmlInvalidAnyAttributeUse";
		public const string XmlInvalidArrayDimentions = "XmlInvalidArrayDimentions";
		public const string XmlInvalidArrayLength = "XmlInvalidArrayLength";
		public const string XmlInvalidArrayRef = "XmlInvalidArrayRef";
		public const string XmlInvalidArraySyntax = "XmlInvalidArraySyntax";
		public const string XmlInvalidArrayTypeName = "XmlInvalidArrayTypeName";
		public const string XmlInvalidArrayTypeNamespace = "XmlInvalidArrayTypeNamespace";
		public const string XmlInvalidArrayTypeSyntax = "XmlInvalidArrayTypeSyntax";
		public const string XmlInvalidAttributeType = "XmlInvalidAttributeType";
		public const string XmlInvalidAttributeUse = "XmlInvalidAttributeUse";
		public const string XmlInvalidBaseType = "XmlInvalidBaseType";
		public const string XmlInvalidCast = "XmlInvalidCast";
		public const string XmlInvalidCastWithId = "XmlInvalidCastWithId";
		public const string XmlInvalidChoiceIdentifierValue = "XmlInvalidChoiceIdentifierValue";
		public const string XmlInvalidConstantAttribute = "XmlInvalidConstantAttribute";
		public const string XmlInvalidContent = "XmlInvalidContent";
		public const string XmlInvalidDataTypeUsage = "XmlInvalidDataTypeUsage";
		public const string XmlInvalidDefaultEnumValue = "XmlInvalidDefaultEnumValue";
		public const string XmlInvalidDefaultValue = "XmlInvalidDefaultValue";
		public const string XmlInvalidElementAttribute = "XmlInvalidElementAttribute";
		public const string XmlInvalidEncoding = "XmlInvalidEncoding";
		public const string XmlInvalidEncoding3 = "XmlInvalidEncoding3";
		public const string XmlInvalidEncodingNotEncoded1 = "XmlInvalidEncodingNotEncoded1";
		public const string XmlInvalidEnumAttribute = "XmlInvalidEnumAttribute";
		public const string XmlInvalidEnumContent = "XmlInvalidEnumContent";
		public const string XmlInvalidFormUnqualified = "XmlInvalidFormUnqualified";
		public const string XmlInvalidHref = "XmlInvalidHref";
		public const string XmlInvalidIdentifier = "XmlInvalidIdentifier";
		public const string XmlInvalidIsNullable = "XmlInvalidIsNullable";
		public const string XmlInvalidNotNullable = "XmlInvalidNotNullable";
		public const string XmlInvalidNullCast = "XmlInvalidNullCast";
		public const string XmlInvalidReturnPosition = "XmlInvalidReturnPosition";
		public const string XmlInvalidSchemaElementType = "XmlInvalidSchemaElementType";
		public const string XmlInvalidSchemaExtension = "XmlInvalidSchemaExtension";
		public const string XmlInvalidSerializable = "XmlInvalidSerializable";
		public const string XmlInvalidSoapArray = "XmlInvalidSoapArray";
		public const string XmlInvalidSpecifiedType = "XmlInvalidSpecifiedType";
		public const string XmlInvalidSubstitutionGroupUse = "XmlInvalidSubstitutionGroupUse";
		public const string XmlInvalidTypeAttributes = "XmlInvalidTypeAttributes";
		public const string XmlInvalidUseOfType = "XmlInvalidUseOfType";
		public const string XmlInvalidVoid = "XmlInvalidVoid";
		public const string XmlInvalidXmlOverride = "XmlInvalidXmlOverride";
		public const string XmlInvalidXmlns = "XmlInvalidXmlns";
		public const string XmlInvalidXsdDataType = "XmlInvalidXsdDataType";
		public const string XmlLang = "XmlLang";
		public const string XmlMappingsScopeMismatch = "XmlMappingsScopeMismatch";
		public const string XmlMelformMapping  = "XmlMelformMapping ";
		public const string XmlMembersDeriveError = "XmlMembersDeriveError";
		public const string XmlMethodTypeNameConflict = "XmlMethodTypeNameConflict";
		public const string XmlMismatchSchemaObjects = "XmlMismatchSchemaObjects";
		public const string XmlMismatchedArrayBrackets = "XmlMismatchedArrayBrackets";
		public const string XmlMissingArrayType = "XmlMissingArrayType";
		public const string XmlMissingAttribute = "XmlMissingAttribute";
		public const string XmlMissingAttributeGroup = "XmlMissingAttributeGroup";
		public const string XmlMissingDataType = "XmlMissingDataType";
		public const string XmlMissingElement = "XmlMissingElement";
		public const string XmlMissingGroup = "XmlMissingGroup";
		public const string XmlMissingHref = "XmlMissingHref";
		public const string XmlMissingMethodEnum = "XmlMissingMethodEnum";
		public const string XmlMissingSchema = "XmlMissingSchema";
		public const string XmlMissingType = "XmlMissingType";
		public const string XmlMultipleAttributeOverrides = "XmlMultipleAttributeOverrides";
		public const string XmlMultipleXmlns = "XmlMultipleXmlns";
		public const string XmlMultipleXmlnsMembers = "XmlMultipleXmlnsMembers";
		public const string XmlNeedAttributeHere = "XmlNeedAttributeHere";
		public const string XmlNoAddMethod = "XmlNoAddMethod";
		public const string XmlNoAttributeHere = "XmlNoAttributeHere";
		public const string XmlNoDefaultAccessors = "XmlNoDefaultAccessors";
		public const string XmlNoNameAllowed = "A node of type '{0}' cannot have a name.";
		public const string XmlNoPartialTrust = "XmlNoPartialTrust";
		public const string XmlNoSerializableMembers = "XmlNoSerializableMembers";
		public const string XmlNotKnownDefaultValue = "XmlNotKnownDefaultValue";
		public const string XmlNotSerializable = "XmlNotSerializable";
		public const string XmlPregenAssemblyDynamic = "XmlPregenAssemblyDynamic";
		public const string XmlPregenCannotLoad = "XmlPregenCannotLoad";
		public const string XmlPregenInvalidXmlSerializerAssemblyAttribute = "XmlPregenInvalidXmlSerializerAssemblyAttribute";
		public const string XmlPregenMissingDirectory = "XmlPregenMissingDirectory";
		public const string XmlPregenMissingTempDirectory = "XmlPregenMissingTempDirectory";
		public const string XmlPregenOrphanType = "XmlPregenOrphanType";
		public const string XmlPregenTypeDynamic = "XmlPregenTypeDynamic";
		public const string XmlPrimitiveBaseType = "XmlPrimitiveBaseType";
		public const string XmlReadOnlyCollection = "XmlReadOnlyCollection";
		public const string XmlReadOnlyPropertyError = "XmlReadOnlyPropertyError";
		public const string XmlReflectionError = "XmlReflectionError";
		public const string XmlRemarks = "XmlRemarks";
		public const string XmlRpcArrayOfValueTypes = "XmlRpcArrayOfValueTypes";
		public const string XmlRpcLitArrayElement = "XmlRpcLitArrayElement";
		public const string XmlRpcLitAttributeAttributes = "XmlRpcLitAttributeAttributes";
		public const string XmlRpcLitAttributes = "XmlRpcLitAttributes";
		public const string XmlRpcLitElementNamespace = "XmlRpcLitElementNamespace";
		public const string XmlRpcLitElementNullable = "XmlRpcLitElementNullable";
		public const string XmlRpcLitElements = "XmlRpcLitElements";
		public const string XmlRpcLitXmlns = "XmlRpcLitXmlns";
		public const string XmlRpcNestedValueType = "XmlRpcNestedValueType";
		public const string XmlRpcRefsInValueType = "XmlRpcRefsInValueType";
		public const string XmlSchema = "XmlSchema";
		public const string XmlSchemaAttributeReference = "XmlSchemaAttributeReference";
		public const string XmlSchemaCompiled = "XmlSchemaCompiled";
		public const string XmlSchemaContentDef = "XmlSchemaContentDef";
		public const string XmlSchemaDuplicateNamespace = "XmlSchemaDuplicateNamespace";
		public const string XmlSchemaElementReference = "XmlSchemaElementReference";
		public const string XmlSchemaIncludeLocation = "XmlSchemaIncludeLocation";
		public const string XmlSchemaItem = "XmlSchemaItem";
		public const string XmlSchemaNamedItem = "XmlSchemaNamedItem";
		public const string XmlSchemaSyntaxErrorDetails = "XmlSchemaSyntaxErrorDetails";
		public const string XmlSequenceHierarchy = "XmlSequenceHierarchy";
		public const string XmlSequenceInconsistent = "XmlSequenceInconsistent";
		public const string XmlSequenceMatch = "XmlSequenceMatch";
		public const string XmlSequenceMembers = "XmlSequenceMembers";
		public const string XmlSequenceUnique = "XmlSequenceUnique";
		public const string XmlSerializableAttributes = "XmlSerializableAttributes";
		public const string XmlSerializableBadDerivation = "XmlSerializableBadDerivation";
		public const string XmlSerializableMergeItem = "XmlSerializableMergeItem";
		public const string XmlSerializableMissingClrType = "XmlSerializableMissingClrType";
		public const string XmlSerializableNameMissing1 = "XmlSerializableNameMissing1";
		public const string XmlSerializableRootDupName = "XmlSerializableRootDupName";
		public const string XmlSerializableSchemaError = "XmlSerializableSchemaError";
		public const string XmlSerializeError = "XmlSerializeError";
		public const string XmlSerializeErrorDetails = "XmlSerializeErrorDetails";
		public const string XmlSerializerAccessDenied = "XmlSerializerAccessDenied";
		public const string XmlSerializerCompileFailed = "XmlSerializerCompileFailed";
		public const string XmlSerializerExpired = "XmlSerializerExpired";
		public const string XmlSerializerExpiredDetails = "XmlSerializerExpiredDetails";
		public const string XmlSerializerUnsupportedMember = "XmlSerializerUnsupportedMember";
		public const string XmlSerializerUnsupportedType = "XmlSerializerUnsupportedType";
		public const string XmlSoapCannotIncludeInSchema = "XmlSoapCannotIncludeInSchema";
		public const string XmlSoapInvalidAttributeUse = "XmlSoapInvalidAttributeUse";
		public const string XmlSoapInvalidChoice = "XmlSoapInvalidChoice";
		public const string XmlSoapUnsupportedGroupAny = "XmlSoapUnsupportedGroupAny";
		public const string XmlSoapUnsupportedGroupNested = "XmlSoapUnsupportedGroupNested";
		public const string XmlSoapUnsupportedGroupRef = "XmlSoapUnsupportedGroupRef";
		public const string XmlSoapUnsupportedGroupRepeat = "XmlSoapUnsupportedGroupRepeat";
		public const string XmlSoleXmlnsAttribute = "XmlSoleXmlnsAttribute";
		public const string XmlTypeInaccessible = "XmlTypeInaccessible";
		public const string XmlTypeReflectionError = "XmlTypeReflectionError";
		public const string XmlTypeStatic = "XmlTypeStatic";
		public const string XmlTypeUsedTwice = "XmlTypeUsedTwice";
		public const string XmlTypesDuplicate = "XmlTypesDuplicate";
		public const string XmlUdeclaredXsdType = "XmlUdeclaredXsdType";
		public const string XmlUndefinedAlias = "Namespace prefix '{0}' is not defined.";
		public const string XmlUnknownAnyElement = "XmlUnknownAnyElement";
		public const string XmlUnknownConstant = "XmlUnknownConstant";
		public const string XmlUnknownNode = "XmlUnknownNode";
		public const string XmlUnknownType = "XmlUnknownType";
		public const string XmlUnsupportedDefaultType = "XmlUnsupportedDefaultType";
		public const string XmlUnsupportedDefaultValue = "XmlUnsupportedDefaultValue";
		public const string XmlUnsupportedIDictionary = "XmlUnsupportedIDictionary";
		public const string XmlUnsupportedIDictionaryDetails = "XmlUnsupportedIDictionaryDetails";
		public const string XmlUnsupportedInheritance = "XmlUnsupportedInheritance";
		public const string XmlUnsupportedInterface = "XmlUnsupportedInterface";
		public const string XmlUnsupportedInterfaceDetails = "XmlUnsupportedInterfaceDetails";
		public const string XmlUnsupportedOpenGenericType = "XmlUnsupportedOpenGenericType";
		public const string XmlUnsupportedRank = "XmlUnsupportedRank";
		public const string XmlUnsupportedRedefine = "XmlUnsupportedRedefine";
		public const string XmlUnsupportedSoapTypeKind = "XmlUnsupportedSoapTypeKind";
		public const string XmlUnsupportedTypeKind = "XmlUnsupportedTypeKind";
		public const string XmlUnxpectedType = "XmlUnxpectedType";
		public const string XmlXmlnsInvalidType = "XmlXmlnsInvalidType";
		public const string Xp_BadQueryObject = "This is an invalid object. Only objects returned from Compile() can be passed as input.";
		public const string Xp_CurrentNotAllowed = "The 'current()' function cannot be used in a pattern.";
		public const string Xp_ExprExpected = "'{0}' is an invalid expression.";
		public const string Xp_FunctionFailed = "Function '{0}()' has failed.";
		public const string Xp_InvalidArgumentType = "The argument to function '{0}' in '{1}' cannot be converted to a node-set.";
		public const string Xp_InvalidKeyPattern = "'{0}' is an invalid key pattern. It either contains a variable reference or 'key()' function.";
		public const string Xp_InvalidName = "'{0}' has an invalid qualified name.";
		public const string Xp_InvalidNumArgs = "Function '{0}' in '{1}' has an invalid number of arguments.";
		public const string Xp_InvalidPattern = "'{0}' is an invalid XSLT pattern.";
		public const string Xp_InvalidToken = "'{0}' has an invalid token.";
		public const string Xp_NoContext = "Namespace Manager or XsltContext needed. This query has a prefix, variable, or user-defined function.";
		public const string Xp_NodeSetExpected = "Expression must evaluate to a node-set.";
		public const string Xp_NotSupported = "The XPath query '{0}' is not supported.";
		public const string Xp_QueryTooComplex = "The xpath query is too complex.";
		public const string Xp_UnclosedString = "This is an unclosed string.";
		public const string Xp_UndefFunc = "The function '{0}()' is undefined.";
		public const string Xp_UndefVar = "The variable '{0}' is undefined.";
		public const string Xp_UndefinedXsltContext = "XsltContext is needed for this query because of an unknown function.";
		public const string Xpn_BadPosition = "Operation is not valid due to the current position of the navigator.";
		public const string Xpn_MissingParent = "The current position of the navigator is missing a valid parent.";
		public const string Xpn_NoContent = "No content generated as the result of the operation.";
		public const string Xdom_AttrCol_Insert = "The reference node must be a child of the current node.";
		public const string Xdom_AttrCol_Object = "An 'Attributes' collection can only contain 'Attribute' objects.";
		public const string Xdom_Attr_InUse = "The 'Attribute' node cannot be inserted because it is already an attribute of another element.";
		public const string Xdom_Attr_Name = "The attribute local name cannot be empty.";
		public const string Xdom_Attr_Reserved_XmlNS = "The namespace declaration attribute has an incorrect 'namespaceURI': '{0}'.";
		public const string Xdom_Document_Innertext = "The 'InnerText' of a 'Document' node is read-only and cannot be set.";
		public const string Xdom_DualDeclarationNode = "This document already has an 'XmlDeclaration' node.";
		public const string Xdom_DualDocumentElementNode = "This document already has a 'DocumentElement' node.";
		public const string Xdom_DualDocumentTypeNode = "This document already has a 'DocumentType' node.";
		public const string Xdom_Empty_LocalName = "The local name for elements or attributes cannot be null or an empty string.";
		public const string Xdom_EntRef_SetVal = "'EntityReference' nodes have no support for setting value.";
		public const string Xdom_Ent_Innertext = "The 'InnerText' of an 'Entity' node is read-only and cannot be set.";
		public const string Xdom_Enum_ElementList = "The element list has changed. The enumeration operation failed to continue.";
		public const string Xdom_Import = "Cannot import nodes of type '{0}'.";
		public const string Xdom_Import_NullNode = "Cannot import a null node.";
		public const string Xdom_IndexOutOfRange = "The index being passed in is out of range.";
		public const string Xdom_InvalidCharacter_EntityReference = "Cannot create an 'EntityReference' node with a name starting with '#'.";
		public const string Xdom_Invalid_NT_String = "'{0}' does not represent any 'XmlNodeType'.";
		public const string Xdom_Load_NoDocument = "The document to be loaded could not be found.";
		public const string Xdom_Load_NoReader = "There is no reader from which to load the document.";
		public const string Xdom_NamedNode_Context = "The named node is from a different document context.";
		public const string Xdom_NoRootEle = "The document does not have a root element.";
		public const string Xdom_Node_Cloning = "'Entity' and 'Notation' nodes cannot be cloned.";
		public const string Xdom_Node_Insert_Child = "Cannot insert a node or any ancestor of that node as a child of itself.";
		public const string Xdom_Node_Insert_Contain = "The current node cannot contain other nodes.";
		public const string Xdom_Node_Insert_Context = "The node to be inserted is from a different document context.";
		public const string Xdom_Node_Insert_Location = "Cannot insert the node in the specified location.";
		public const string Xdom_Node_Insert_Path = "The reference node is not a child of this node.";
		public const string Xdom_Node_Insert_TypeConflict = "The specified node cannot be inserted as the valid child of this node, because the specified node is the wrong type.";
		public const string Xdom_Node_Modify_ReadOnly = "This node is read-only. It cannot be modified.";
		public const string Xdom_Node_Null_Doc = "Cannot create a node without an owner document.";
		public const string Xdom_Node_Remove_Child = "The node to be removed is not a child of this node.";
		public const string Xdom_Node_Remove_Contain = "The current node cannot contain other nodes, so the node to be removed is not its child.";
		public const string Xdom_Node_SetVal = "Cannot set a value on node type '{0}'.";
		public const string Xdom_Set_InnerXml = "Cannot set the 'InnerXml' for the current node because it is either read-only or cannot have children.";
		public const string Xdom_TextNode_SplitText = "The 'Text' node is not connected in the DOM live tree. No 'SplitText' operation could be performed.";
		public const string Xdom_Version = "Wrong XML version information. The XML must match production \"VersionNum ::= '1.' [0-9]+\".";
		public const string Xdom_WS_Char = "The string for white space contains an invalid character.";
		public const string Xdom_standalone = "Wrong value for the XML declaration standalone attribute of '{0}'.";
		public const string SchInf_NoElement = "SchInf_NoElement";
		public const string SchInf_UnknownParticle = "SchInf_UnknownParticle";
		public const string SchInf_ct = "SchInf_ct";
		public const string SchInf_entity = "SchInf_entity";
		public const string SchInf_extension = "SchInf_extension";
		public const string SchInf_noct = "SchInf_noct";
		public const string SchInf_noseq = "SchInf_noseq";
		public const string SchInf_particle = "SchInf_particle";
		public const string SchInf_schema = "SchInf_schema";
		public const string SchInf_schematype = "SchInf_schematype";
		public const string SchInf_seq = "SchInf_seq";
		public const string SchInf_simplecontent = "SchInf_simplecontent";
		public const string Sch_AbstractElement = "Sch_AbstractElement";
		public const string Sch_AllElement = "Sch_AllElement";
		public const string Sch_AllRefMinMax = "Sch_AllRefMinMax";
		public const string Sch_AllRefNotRoot = "Sch_AllRefNotRoot";
		public const string Sch_AnnotationLocation = "Sch_AnnotationLocation";
		public const string Sch_AnyAttributeLastChild = "Sch_AnyAttributeLastChild";
		public const string Sch_AnyElement = "Sch_AnyElement";
		public const string Sch_AnyElementNS = "Sch_AnyElementNS";
		public const string Sch_AnyFromAnyRule1 = "Sch_AnyFromAnyRule1";
		public const string Sch_AnyFromAnyRule2 = "Sch_AnyFromAnyRule2";
		public const string Sch_AnyFromAnyRule3 = "Sch_AnyFromAnyRule3";
		public const string Sch_AttListPresence = "Sch_AttListPresence";
		public const string Sch_AttrGroupDoubleRedefine = "Sch_AttrGroupDoubleRedefine";
		public const string Sch_AttrGroupRedefineNotFound = "Sch_AttrGroupRedefineNotFound";
		public const string Sch_AttrUseAndWildId = "Sch_AttrUseAndWildId";
		public const string Sch_AttributeCircularRef = "Sch_AttributeCircularRef";
		public const string Sch_AttributeDefaultDataType = "Sch_AttributeDefaultDataType";
		public const string Sch_AttributeFixedInvalid = "Sch_AttributeFixedInvalid";
		public const string Sch_AttributeGroupCircularRef = "Sch_AttributeGroupCircularRef";
		public const string Sch_AttributeIgnored = "Sch_AttributeIgnored";
		public const string Sch_AttributeMutuallyExclusive = "Sch_AttributeMutuallyExclusive";
		public const string Sch_AttributeNameRef = "Sch_AttributeNameRef";
		public const string Sch_AttributeRestrictionInvalid = "Sch_AttributeRestrictionInvalid";
		public const string Sch_AttributeRestrictionInvalidFromWildcard = "Sch_AttributeRestrictionInvalidFromWildcard";
		public const string Sch_AttributeRestrictionProhibited = "Sch_AttributeRestrictionProhibited";
		public const string Sch_AttributeUseInvalid = "Sch_AttributeUseInvalid";
		public const string Sch_AttributeValueDataType = "Invalid data value is passed to attribute '{0}'";
		public const string Sch_AttributeValueDataTypeDetailed = "Sch_AttributeValueDataTypeDetailed";
		public const string Sch_BaseFinalExtension = "Sch_BaseFinalExtension";
		public const string Sch_BaseFinalList = "Sch_BaseFinalList";
		public const string Sch_BaseFinalRestriction = "Sch_BaseFinalRestriction";
		public const string Sch_BaseFinalUnion = "Sch_BaseFinalUnion";
		public const string Sch_CannotLoadSchema = "Sch_CannotLoadSchema";
		public const string Sch_CannotLoadSchemaLocation = "Sch_CannotLoadSchemaLocation";
		public const string Sch_ComplexContentContentModel = "Sch_ComplexContentContentModel";
		public const string Sch_ComplexContentModel  = "Sch_ComplexContentModel ";
		public const string Sch_ComplexToSimpleTypeRedefine = "Sch_ComplexToSimpleTypeRedefine";
		public const string Sch_ComplexTypeContentModel = "Sch_ComplexTypeContentModel";
		public const string Sch_ComplexTypeDoubleRedefine = "Sch_ComplexTypeDoubleRedefine";
		public const string Sch_ComplexTypeRedefineNotFound = "Sch_ComplexTypeRedefineNotFound";
		public const string Sch_ComponentAlreadySeenForNS = "Sch_ComponentAlreadySeenForNS";
		public const string Sch_ComponentRedefineNotFound = "Sch_ComponentRedefineNotFound";
		public const string Sch_ContentInNill = "Sch_ContentInNill";
		public const string Sch_ContinuationString = "Sch_ContinuationString";
		public const string Sch_DataTypeTextOnly = "Sch_DataTypeTextOnly";
		public const string Sch_DefaultAttributeNotApplied = "Sch_DefaultAttributeNotApplied";
		public const string Sch_DefaultException = "{0}";
		public const string Sch_DefaultFixedAttributes = "Sch_DefaultFixedAttributes";
		public const string Sch_DefaultIdValue = "Sch_DefaultIdValue";
		public const string Sch_DerivedNotFromBase = "Sch_DerivedNotFromBase";
		public const string Sch_DifContentType = "Sch_DifContentType";
		public const string Sch_DtMaxLengthInvalid = "Sch_DtMaxLengthInvalid";
		public const string Sch_DtMinLengthInvalid = "Sch_DtMinLengthInvalid";
		public const string Sch_DtMinMaxLength = "Sch_DtMinMaxLength";
		public const string Sch_DupAttribute = "Sch_DupAttribute";
		public const string Sch_DupAttributeGroup = "Sch_DupAttributeGroup";
		public const string Sch_DupAttributeUse = "Sch_DupAttributeUse";
		public const string Sch_DupComplexType = "Sch_DupComplexType";
		public const string Sch_DupDtMaxLength = "Sch_DupDtMaxLength";
		public const string Sch_DupDtMinLength = "Sch_DupDtMinLength";
		public const string Sch_DupDtType = "Sch_DupDtType";
		public const string Sch_DupElement = "Sch_DupElement";
		public const string Sch_DupElementDecl = "Sch_DupElementDecl";
		public const string Sch_DupFractionDigitsFacet = "Sch_DupFractionDigitsFacet";
		public const string Sch_DupGlobalAttribute = "Sch_DupGlobalAttribute";
		public const string Sch_DupGlobalElement = "Sch_DupGlobalElement";
		public const string Sch_DupGroup = "Sch_DupGroup";
		public const string Sch_DupGroupParticle = "Sch_DupGroupParticle";
		public const string Sch_DupId = "Sch_DupId";
		public const string Sch_DupIdAttribute = "Sch_DupIdAttribute";
		public const string Sch_DupIdentityConstraint = "Sch_DupIdentityConstraint";
		public const string Sch_DupLengthFacet = "Sch_DupLengthFacet";
		public const string Sch_DupMaxExclusiveFacet = "Sch_DupMaxExclusiveFacet";
		public const string Sch_DupMaxInclusiveFacet = "Sch_DupMaxInclusiveFacet";
		public const string Sch_DupMaxLengthFacet = "Sch_DupMaxLengthFacet";
		public const string Sch_DupMinExclusiveFacet = "Sch_DupMinExclusiveFacet";
		public const string Sch_DupMinInclusiveFacet = "Sch_DupMinInclusiveFacet";
		public const string Sch_DupMinLengthFacet = "Sch_DupMinLengthFacet";
		public const string Sch_DupNotation = "Sch_DupNotation";
		public const string Sch_DupNotationAttribute = "Sch_DupNotationAttribute";
		public const string Sch_DupSelector = "Sch_DupSelector";
		public const string Sch_DupSimpleType = "Sch_DupSimpleType";
		public const string Sch_DupSimpleTypeChild = "Sch_DupSimpleTypeChild";
		public const string Sch_DupTotalDigitsFacet = "Sch_DupTotalDigitsFacet";
		public const string Sch_DupWhiteSpaceFacet = "Sch_DupWhiteSpaceFacet";
		public const string Sch_DupXsdElement = "Sch_DupXsdElement";
		public const string Sch_DuplicateAttribute = "Sch_DuplicateAttribute";
		public const string Sch_DuplicateKey = "Sch_DuplicateKey";
		public const string Sch_ElementCannotHaveValue = "Sch_ElementCannotHaveValue";
		public const string Sch_ElementCircularRef = "Sch_ElementCircularRef";
		public const string Sch_ElementFromAnyRule1 = "Sch_ElementFromAnyRule1";
		public const string Sch_ElementFromAnyRule2 = "Sch_ElementFromAnyRule2";
		public const string Sch_ElementFromElement = "Sch_ElementFromElement";
		public const string Sch_ElementFromGroupBase1 = "Sch_ElementFromGroupBase1";
		public const string Sch_ElementFromGroupBase2 = "Sch_ElementFromGroupBase2";
		public const string Sch_ElementFromGroupBase3 = "Sch_ElementFromGroupBase3";
		public const string Sch_ElementInMixedWithFixed = "Sch_ElementInMixedWithFixed";
		public const string Sch_ElementMissing = "Sch_ElementMissing";
		public const string Sch_ElementName = "'{0}' element";
		public const string Sch_ElementNameAndNamespace = "Sch_ElementNameAndNamespace";
		public const string Sch_ElementNameRef = "Sch_ElementNameRef";
		public const string Sch_ElementNotAllowed = "Sch_ElementNotAllowed";
		public const string Sch_ElementRef = "Sch_ElementRef";
		public const string Sch_ElementTypeCollision = "Sch_ElementTypeCollision";
		public const string Sch_ElementValueDataType = "Invalid data value is passed to element '{0}'";
		public const string Sch_ElementValueDataTypeDetailed = "Sch_ElementValueDataTypeDetailed";
		public const string Sch_EmptyAttributeValue = "Sch_EmptyAttributeValue";
		public const string Sch_EmptyChoice = "Sch_EmptyChoice";
		public const string Sch_EmptyXPath = "Sch_EmptyXPath";
		public const string Sch_EnumFinished = "Enumeration has already finished.";
		public const string Sch_EnumNotStarted = "Enumeration has not started. Call MoveNext.";
		public const string Sch_EnumerationConstraintFailed = "Sch_EnumerationConstraintFailed";
		public const string Sch_EnumerationFacetInvalid = "Sch_EnumerationFacetInvalid";
		public const string Sch_EnumerationFacetProhibited = "Sch_EnumerationFacetProhibited";
		public const string Sch_EnumerationValue = "Sch_EnumerationValue";
		public const string Sch_FacetBaseFixed = "Sch_FacetBaseFixed";
		public const string Sch_FieldSimpleTypeExpected = "Sch_FieldSimpleTypeExpected";
		public const string Sch_FieldSingleValueExpected = "Sch_FieldSingleValueExpected";
		public const string Sch_FixedAttributeValue = "Sch_FixedAttributeValue";
		public const string Sch_FixedDefaultInRef = "Sch_FixedDefaultInRef";
		public const string Sch_FixedElementValue = "Sch_FixedElementValue";
		public const string Sch_FixedInRef = "Sch_FixedInRef";
		public const string Sch_ForbiddenAttribute = "Sch_ForbiddenAttribute";
		public const string Sch_ForbiddenDerivedParticleForAll = "Sch_ForbiddenDerivedParticleForAll";
		public const string Sch_ForbiddenDerivedParticleForChoice = "Sch_ForbiddenDerivedParticleForChoice";
		public const string Sch_ForbiddenDerivedParticleForElem = "Sch_ForbiddenDerivedParticleForElem";
		public const string Sch_ForbiddenDerivedParticleForSeq = "Sch_ForbiddenDerivedParticleForSeq";
		public const string Sch_FractionDigitsConstraintFailed = "Sch_FractionDigitsConstraintFailed";
		public const string Sch_FractionDigitsFacetInvalid = "Sch_FractionDigitsFacetInvalid";
		public const string Sch_FractionDigitsFacetProhibited = "Sch_FractionDigitsFacetProhibited";
		public const string Sch_FractionDigitsGtTotalDigits = "Sch_FractionDigitsGtTotalDigits";
		public const string Sch_FractionDigitsNotOnDecimal = "Sch_FractionDigitsNotOnDecimal";
		public const string Sch_GroupBaseFromAny1 = "Sch_GroupBaseFromAny1";
		public const string Sch_GroupBaseFromAny2 = "Sch_GroupBaseFromAny2";
		public const string Sch_GroupBaseRestNoMap = "Sch_GroupBaseRestNoMap";
		public const string Sch_GroupBaseRestNotEmptiable = "Sch_GroupBaseRestNotEmptiable";
		public const string Sch_GroupBaseRestRangeInvalid = "Sch_GroupBaseRestRangeInvalid";
		public const string Sch_GroupCircularRef = "Sch_GroupCircularRef";
		public const string Sch_GroupDisabled = "Sch_GroupDisabled";
		public const string Sch_GroupDoubleRedefine = "Sch_GroupDoubleRedefine";
		public const string Sch_GroupRedefineNotFound = "Sch_GroupRedefineNotFound";
		public const string Sch_ICXpathError = "Sch_ICXpathError";
		public const string Sch_IdAttrDeclared = "Sch_IdAttrDeclared";
		public const string Sch_IdConstraintNoFields = "Sch_IdConstraintNoFields";
		public const string Sch_IdConstraintNoRefer = "Sch_IdConstraintNoRefer";
		public const string Sch_IdConstraintNoSelector = "Sch_IdConstraintNoSelector";
		public const string Sch_IdentityConstraintCircularRef = "Sch_IdentityConstraintCircularRef";
		public const string Sch_ImportLocation = "Sch_ImportLocation";
		public const string Sch_ImportTargetNamespace = "Sch_ImportTargetNamespace";
		public const string Sch_ImportTargetNamespaceNull = "Sch_ImportTargetNamespaceNull";
		public const string Sch_IncludeLocation = "Sch_IncludeLocation";
		public const string Sch_IncompleteContent = "Sch_IncompleteContent";
		public const string Sch_IncompleteContentComplex = "Sch_IncompleteContentComplex";
		public const string Sch_IncompleteContentExpecting = "Sch_IncompleteContentExpecting";
		public const string Sch_IncompleteContentExpectingComplex = "Sch_IncompleteContentExpectingComplex";
		public const string Sch_InvalidAllElementMax = "Sch_InvalidAllElementMax";
		public const string Sch_InvalidAllMax = "Sch_InvalidAllMax";
		public const string Sch_InvalidAllMin = "Sch_InvalidAllMin";
		public const string Sch_InvalidAny = "Sch_InvalidAny";
		public const string Sch_InvalidAnyAttribute = "Sch_InvalidAnyAttribute";
		public const string Sch_InvalidAnyAttributeRestriction = "Sch_InvalidAnyAttributeRestriction";
		public const string Sch_InvalidAnyDetailed = "Sch_InvalidAnyDetailed";
		public const string Sch_InvalidAttribute = "Sch_InvalidAttribute";
		public const string Sch_InvalidAttributeExtension = "Sch_InvalidAttributeExtension";
		public const string Sch_InvalidAttributeRef = "Sch_InvalidAttributeRef";
		public const string Sch_InvalidBaseToEmpty = "Sch_InvalidBaseToEmpty";
		public const string Sch_InvalidBaseToMixed = "Sch_InvalidBaseToMixed";
		public const string Sch_InvalidBlockDefaultValue = "Sch_InvalidBlockDefaultValue";
		public const string Sch_InvalidBoolean = "Sch_InvalidBoolean";
		public const string Sch_InvalidCollection = "Sch_InvalidCollection";
		public const string Sch_InvalidComplexTypeBlockValue = "Sch_InvalidComplexTypeBlockValue";
		public const string Sch_InvalidComplexTypeFinalValue = "Sch_InvalidComplexTypeFinalValue";
		public const string Sch_InvalidContentRestriction = "Sch_InvalidContentRestriction";
		public const string Sch_InvalidContentRestrictionDetailed = "Sch_InvalidContentRestrictionDetailed";
		public const string Sch_InvalidDateTimeOption = "Sch_InvalidDateTimeOption";
		public const string Sch_InvalidElementBlockValue = "Sch_InvalidElementBlockValue";
		public const string Sch_InvalidElementContent = "Sch_InvalidElementContent";
		public const string Sch_InvalidElementContentComplex = "Sch_InvalidElementContentComplex";
		// There are two places that use this message, but they have different number of arguments...! One has 3, anoher has 4. We cannot fail at 3 args.
		public const string Sch_InvalidElementContentExpecting = "Invalid start element. Within {0}, got {1}, while expected {2}.";
		public const string Sch_InvalidElementContentExpectingComplex = "Sch_InvalidElementContentExpectingComplex";
		public const string Sch_InvalidElementDefaultValue = "Sch_InvalidElementDefaultValue";
		public const string Sch_InvalidElementFinalValue = "Sch_InvalidElementFinalValue";
		public const string Sch_InvalidElementInEmptyEx = "Sch_InvalidElementInEmptyEx";
		public const string Sch_InvalidElementInTextOnlyEx = "Sch_InvalidElementInTextOnlyEx";
		public const string Sch_InvalidElementRef = "Sch_InvalidElementRef";
		public const string Sch_InvalidElementSubstitution = "Sch_InvalidElementSubstitution";
		public const string Sch_InvalidEndElementCall = "Sch_InvalidEndElementCall";
		public const string Sch_InvalidEndElementCallTyped = "Sch_InvalidEndElementCallTyped";
		public const string Sch_InvalidEndElementMultiple = "Sch_InvalidEndElementMultiple";
		public const string Sch_InvalidEndValidation = "Sch_InvalidEndValidation";
		public const string Sch_InvalidExamplar = "Sch_InvalidExamplar";
		public const string Sch_InvalidFacet = "Sch_InvalidFacet";
		public const string Sch_InvalidFacetPosition = "Sch_InvalidFacetPosition";
		public const string Sch_InvalidFinalDefaultValue = "Sch_InvalidFinalDefaultValue";
		public const string Sch_InvalidIdAttribute = "Sch_InvalidIdAttribute";
		public const string Sch_InvalidIncludeLocation = "Sch_InvalidIncludeLocation";
		public const string Sch_InvalidLanguageId = "Sch_InvalidLanguageId";
		public const string Sch_InvalidNameAttributeEx = "Sch_InvalidNameAttributeEx";
		public const string Sch_InvalidNamespace = "Sch_InvalidNamespace";
		public const string Sch_InvalidNamespaceAttribute = "Sch_InvalidNamespaceAttribute";
		public const string Sch_InvalidPIComment = "Sch_InvalidPIComment";
		public const string Sch_InvalidPartialValidationType = "Sch_InvalidPartialValidationType";
		public const string Sch_InvalidParticleRestriction = "Sch_InvalidParticleRestriction";
		public const string Sch_InvalidParticleRestrictionDetailed = "Sch_InvalidParticleRestrictionDetailed";
		public const string Sch_InvalidPublicAttribute = "Sch_InvalidPublicAttribute";
		public const string Sch_InvalidSchemaLocation = "Sch_InvalidSchemaLocation";
		public const string Sch_InvalidSimpleTypeFinalValue = "Sch_InvalidSimpleTypeFinalValue";
		public const string Sch_InvalidSimpleTypeRestriction = "Sch_InvalidSimpleTypeRestriction";
		public const string Sch_InvalidStartTransition = "Sch_InvalidStartTransition";
		public const string Sch_InvalidStateTransition = "Sch_InvalidStateTransition";
		public const string Sch_InvalidSubstitutionMember = "Sch_InvalidSubstitutionMember";
		public const string Sch_InvalidSystemAttribute = "Sch_InvalidSystemAttribute";
		public const string Sch_InvalidTargetNamespaceAttribute = "Sch_InvalidTargetNamespaceAttribute";
		public const string Sch_InvalidTextInElement = "Sch_InvalidTextInElement";
		public const string Sch_InvalidTextInElementExpecting = "Sch_InvalidTextInElementExpecting";
		public const string Sch_InvalidTextInEmpty = "Sch_InvalidTextInEmpty";
		public const string Sch_InvalidTypeRedefine = "Sch_InvalidTypeRedefine";
		public const string Sch_InvalidValue = "Sch_InvalidValue";
		public const string Sch_InvalidValueDetailed = "Sch_InvalidValueDetailed";
		public const string Sch_InvalidValueDetailedAttribute = "Sch_InvalidValueDetailedAttribute";
		public const string Sch_InvalidWhiteSpace = "Sch_InvalidWhiteSpace";
		public const string Sch_InvalidWhitespaceInEmpty = "Sch_InvalidWhitespaceInEmpty";
		public const string Sch_InvalidXsdAttributeDatatypeValue = "Sch_InvalidXsdAttributeDatatypeValue";
		public const string Sch_InvalidXsdAttributeValue = "Sch_InvalidXsdAttributeValue";
		public const string Sch_InvalidXsiNill = "Sch_InvalidXsiNill";
		public const string Sch_LengthAndMinMax = "Sch_LengthAndMinMax";
		public const string Sch_LengthConstraintFailed = "Sch_LengthConstraintFailed";
		public const string Sch_LengthFacetInvalid = "Sch_LengthFacetInvalid";
		public const string Sch_LengthFacetProhibited = "Sch_LengthFacetProhibited";
		public const string Sch_LengthGtBaseLength = "Sch_LengthGtBaseLength";
		public const string Sch_ListFromNonatomic = "Sch_ListFromNonatomic";
		public const string Sch_ManyMaxOccurs = "Sch_ManyMaxOccurs";
		public const string Sch_MaxExclusiveConstraintFailed = "Sch_MaxExclusiveConstraintFailed";
		public const string Sch_MaxExclusiveFacetInvalid = "Sch_MaxExclusiveFacetInvalid";
		public const string Sch_MaxExclusiveFacetProhibited = "Sch_MaxExclusiveFacetProhibited";
		public const string Sch_MaxExclusiveMismatch = "Sch_MaxExclusiveMismatch";
		public const string Sch_MaxExlIncMismatch = "Sch_MaxExlIncMismatch";
		public const string Sch_MaxIncExlMismatch = "Sch_MaxIncExlMismatch";
		public const string Sch_MaxInclusiveConstraintFailed = "Sch_MaxInclusiveConstraintFailed";
		public const string Sch_MaxInclusiveExclusive = "Sch_MaxInclusiveExclusive";
		public const string Sch_MaxInclusiveFacetInvalid = "Sch_MaxInclusiveFacetInvalid";
		public const string Sch_MaxInclusiveFacetProhibited = "Sch_MaxInclusiveFacetProhibited";
		public const string Sch_MaxInclusiveMismatch = "Sch_MaxInclusiveMismatch";
		public const string Sch_MaxLengthConstraintFailed = "Sch_MaxLengthConstraintFailed";
		public const string Sch_MaxLengthFacetInvalid = "Sch_MaxLengthFacetInvalid";
		public const string Sch_MaxLengthFacetProhibited = "Sch_MaxLengthFacetProhibited";
		public const string Sch_MaxLengthGtBaseMaxLength = "Sch_MaxLengthGtBaseMaxLength";
		public const string Sch_MaxMinLengthBaseLength = "Sch_MaxMinLengthBaseLength";
		public const string Sch_MaxOccursInvalid = "Sch_MaxOccursInvalid";
		public const string Sch_MaxOccursInvalidXsd = "Sch_MaxOccursInvalidXsd";
		public const string Sch_MinExclusiveConstraintFailed = "Sch_MinExclusiveConstraintFailed";
		public const string Sch_MinExclusiveFacetInvalid = "Sch_MinExclusiveFacetInvalid";
		public const string Sch_MinExclusiveFacetProhibited = "Sch_MinExclusiveFacetProhibited";
		public const string Sch_MinExclusiveGtMaxExclusive = "Sch_MinExclusiveGtMaxExclusive";
		public const string Sch_MinExclusiveGtMaxInclusive = "Sch_MinExclusiveGtMaxInclusive";
		public const string Sch_MinExclusiveMismatch = "Sch_MinExclusiveMismatch";
		public const string Sch_MinExlIncMismatch = "Sch_MinExlIncMismatch";
		public const string Sch_MinExlMaxExlMismatch = "Sch_MinExlMaxExlMismatch";
		public const string Sch_MinGtMax = "Sch_MinGtMax";
		public const string Sch_MinIncExlMismatch = "Sch_MinIncExlMismatch";
		public const string Sch_MinIncMaxExlMismatch = "Sch_MinIncMaxExlMismatch";
		public const string Sch_MinInclusiveConstraintFailed = "Sch_MinInclusiveConstraintFailed";
		public const string Sch_MinInclusiveExclusive = "Sch_MinInclusiveExclusive";
		public const string Sch_MinInclusiveFacetInvalid = "Sch_MinInclusiveFacetInvalid";
		public const string Sch_MinInclusiveFacetProhibited = "Sch_MinInclusiveFacetProhibited";
		public const string Sch_MinInclusiveGtMaxExclusive = "Sch_MinInclusiveGtMaxExclusive";
		public const string Sch_MinInclusiveGtMaxInclusive = "Sch_MinInclusiveGtMaxInclusive";
		public const string Sch_MinInclusiveMismatch = "Sch_MinInclusiveMismatch";
		public const string Sch_MinLengthConstraintFailed = "Sch_MinLengthConstraintFailed";
		public const string Sch_MinLengthFacetInvalid = "Sch_MinLengthFacetInvalid";
		public const string Sch_MinLengthFacetProhibited = "Sch_MinLengthFacetProhibited";
		public const string Sch_MinLengthGtBaseMinLength = "Sch_MinLengthGtBaseMinLength";
		public const string Sch_MinLengthGtMaxLength = "Sch_MinLengthGtMaxLength";
		public const string Sch_MinMaxGroupRedefine = "Sch_MinMaxGroupRedefine";
		public const string Sch_MinOccursInvalid = "Sch_MinOccursInvalid";
		public const string Sch_MinOccursInvalidXsd = "Sch_MinOccursInvalidXsd";
		public const string Sch_MismatchTargetNamespaceEx = "Sch_MismatchTargetNamespaceEx";
		public const string Sch_MismatchTargetNamespaceImport = "Sch_MismatchTargetNamespaceImport";
		public const string Sch_MismatchTargetNamespaceInclude = "Sch_MismatchTargetNamespaceInclude";
		public const string Sch_MissAttribute = "Sch_MissAttribute";
		public const string Sch_MissDtvalue = "Sch_MissDtvalue";
		public const string Sch_MissDtvaluesAttribute = "Sch_MissDtvaluesAttribute";
		public const string Sch_MissRequiredAttribute = "Sch_MissRequiredAttribute";
		public const string Sch_MissingKey = "Sch_MissingKey";
		public const string Sch_MissingPublicSystemAttribute = "Sch_MissingPublicSystemAttribute";
		public const string Sch_MixSchemaTypes = "Sch_MixSchemaTypes";
		public const string Sch_MixedMany = "Sch_MixedMany";
		public const string Sch_MoreThanOneWildId = "Sch_MoreThanOneWildId";
		public const string Sch_MultipleAttrGroupSelfRef = "Sch_MultipleAttrGroupSelfRef";
		public const string Sch_MultipleGroupSelfRef = "Sch_MultipleGroupSelfRef";
		public const string Sch_MultipleRedefine = "Sch_MultipleRedefine";
		public const string Sch_NeedSimpleTypeChild = "Sch_NeedSimpleTypeChild";
		public const string Sch_NoAttributeSchemaFound = "Sch_NoAttributeSchemaFound";
		public const string Sch_NoDerivedAttribute = "Sch_NoDerivedAttribute";
		public const string Sch_NoElementSchemaFound = "Sch_NoElementSchemaFound";
		public const string Sch_NoExamplar = "Sch_NoExamplar";
		public const string Sch_NoGroupParticle = "Sch_NoGroupParticle";
		public const string Sch_NoRestOrExt = "Sch_NoRestOrExt";
		public const string Sch_NoRestOrExtQName = "Sch_NoRestOrExtQName";
		public const string Sch_NoSimpleTypeContent = "Sch_NoSimpleTypeContent";
		public const string Sch_NonDeterministic = "Sch_NonDeterministic";
		public const string Sch_NonDeterministicAnyAny = "Sch_NonDeterministicAnyAny";
		public const string Sch_NonDeterministicAnyEx = "Sch_NonDeterministicAnyEx";
		public const string Sch_NotAllAlone = "Sch_NotAllAlone";
		public const string Sch_NotComplexContent = "Sch_NotComplexContent";
		public const string Sch_NotNormalizedString = "Sch_NotNormalizedString";
		public const string Sch_NotSimpleContent = "Sch_NotSimpleContent";
		public const string Sch_NotTokenString = "Sch_NotTokenString";
		public const string Sch_NotXsiAttribute = "Sch_NotXsiAttribute";
		public const string Sch_NotationAttributeOnEmptyElement = "Sch_NotationAttributeOnEmptyElement";
		public const string Sch_NotationRequired = "Sch_NotationRequired";
		public const string Sch_NotationValue = "Sch_NotationValue";
		public const string Sch_NullValue = "Sch_NullValue";
		public const string Sch_OptionalDefaultAttribute = "Sch_OptionalDefaultAttribute";
		public const string Sch_ParEntityRefNesting  = "Sch_ParEntityRefNesting ";
		public const string Sch_PatternConstraintFailed = "Sch_PatternConstraintFailed";
		public const string Sch_PatternFacetInvalid = "Sch_PatternFacetInvalid";
		public const string Sch_PatternFacetProhibited = "Sch_PatternFacetProhibited";
		public const string Sch_ProhibitedAttribute = "Sch_ProhibitedAttribute";
		public const string Sch_RedefineLocation = "Sch_RedefineLocation";
		public const string Sch_RedefineNoSchema = "Sch_RedefineNoSchema";
		public const string Sch_RefInvalidAttribute = "Sch_RefInvalidAttribute";
		public const string Sch_RefInvalidCardin = "Sch_RefInvalidCardin";
		public const string Sch_RefInvalidElement = "Sch_RefInvalidElement";
		public const string Sch_RefInvalidIdentityConstraint = "Sch_RefInvalidIdentityConstraint";
		public const string Sch_RefNotInScope = "Sch_RefNotInScope";
		public const string Sch_ReftoKeyref = "Sch_ReftoKeyref";
		public const string Sch_RequireEnumeration = "Sch_RequireEnumeration";
		public const string Sch_RootMatchDocType = "Sch_RootMatchDocType";
		public const string Sch_SchemaAttributeNameMismatch = "Sch_SchemaAttributeNameMismatch";
		public const string Sch_SchemaDoesNotExist = "Sch_SchemaDoesNotExist";
		public const string Sch_SchemaElementNameMismatch = "Sch_SchemaElementNameMismatch";
		public const string Sch_SchemaNotPreprocessed = "Sch_SchemaNotPreprocessed";
		public const string Sch_SchemaNotRemoved = "Sch_SchemaNotRemoved";
		public const string Sch_SchemaRootExpected = "Sch_SchemaRootExpected";
		public const string Sch_SelectorAttr = "Sch_SelectorAttr";
		public const string Sch_SelectorBeforeFields = "Sch_SelectorBeforeFields";
		public const string Sch_SeqFromAll = "Sch_SeqFromAll";
		public const string Sch_SeqFromChoice = "Sch_SeqFromChoice";
		public const string Sch_SimpleToComplexTypeRedefine = "Sch_SimpleToComplexTypeRedefine";
		public const string Sch_SimpleTypeDoubleRedefine = "Sch_SimpleTypeDoubleRedefine";
		public const string Sch_SimpleTypeListRefBase = "Sch_SimpleTypeListRefBase";
		public const string Sch_SimpleTypeListRefBaseNone = "Sch_SimpleTypeListRefBaseNone";
		public const string Sch_SimpleTypeRedefineNotFound = "Sch_SimpleTypeRedefineNotFound";
		public const string Sch_SimpleTypeRestRefBase = "Sch_SimpleTypeRestRefBase";
		public const string Sch_SimpleTypeRestRefBaseNone = "Sch_SimpleTypeRestRefBaseNone";
		public const string Sch_SimpleTypeRestriction = "Sch_SimpleTypeRestriction";
		public const string Sch_SimpleTypeUnionNoBase = "Sch_SimpleTypeUnionNoBase";
		public const string Sch_StandAlone = "Sch_StandAlone";
		public const string Sch_StandAloneNormalization = "Sch_StandAloneNormalization";
		public const string Sch_SubstitutionBlocked = "Sch_SubstitutionBlocked";
		public const string Sch_SubstitutionCircularRef = "Sch_SubstitutionCircularRef";
		public const string Sch_SubstitutionNotAllowed = "Sch_SubstitutionNotAllowed";
		public const string Sch_TargetNamespaceXsi = "Sch_TargetNamespaceXsi";
		public const string Sch_TextNotAllowed = "Sch_TextNotAllowed";
		public const string Sch_TotalDigitsConstraintFailed = "Sch_TotalDigitsConstraintFailed";
		public const string Sch_TotalDigitsFacetInvalid = "Sch_TotalDigitsFacetInvalid";
		public const string Sch_TotalDigitsFacetProhibited = "Sch_TotalDigitsFacetProhibited";
		public const string Sch_TotalDigitsMismatch = "Sch_TotalDigitsMismatch";
		public const string Sch_TwoIdAttrUses = "Sch_TwoIdAttrUses";
		public const string Sch_TypeAfterConstraints = "Sch_TypeAfterConstraints";
		public const string Sch_TypeCircularRef = "Sch_TypeCircularRef";
		public const string Sch_TypeMutualExclusive = "Sch_TypeMutualExclusive";
		public const string Sch_UnSpecifiedDefaultAttributeInExternalStandalone = "Sch_UnSpecifiedDefaultAttributeInExternalStandalone";
		public const string Sch_UndeclaredAttribute = "Specified XML Schema attribute {0} is not declared.";
		public const string Sch_UndeclaredElement = "Specified XML Schema element {0} is not declared.";
		public const string Sch_UndeclaredEntity = "Specified XML entity {0} is not declared.";
		public const string Sch_UndeclaredEquivClass = "Specified XML Schema substitution group {0} is not declared.";
		public const string Sch_UndeclaredId = "Specified ID {0} is not declared.";
		public const string Sch_UndeclaredIdentityConstraint = "Specified XML Schema identity constraint {0} is not declared.";
		public const string Sch_UndeclaredNotation = "XML Schema notation {0} is not declared.";
		public const string Sch_UndeclaredSimpleType = "XML Schema simple type {0} is not declared.";
		public const string Sch_UndeclaredType = "XML Schema type {0} is not declared.";
		public const string Sch_UndefAttributeGroupRef = "XML Schema attribute group {0} is not declared.";
		public const string Sch_UndefBaseExtension = "Specified XML Schema base type {0} for extension is not declared.";
		public const string Sch_UndefBaseRestriction = "Specified XML Schema base type {0} for restriction is not declared.";
		public const string Sch_UndefGroupRef = "Specified XML Schema group {0} is not declared.";
		public const string Sch_UnexpressibleAnyAttribute = "Sch_UnexpressibleAnyAttribute";
		public const string Sch_UnionFailedEx = "Sch_UnionFailedEx";
		public const string Sch_UnionFromUnion = "Sch_UnionFromUnion";
		public const string Sch_UnknownContent = "Sch_UnknownContent";
		public const string Sch_UnknownDtType = "Sch_UnknownDtType";
		public const string Sch_UnknownFacet = "Sch_UnknownFacet";
		public const string Sch_UnknownModel = "Sch_UnknownModel";
		public const string Sch_UnknownOrder = "Sch_UnknownOrder";
		public const string Sch_UnknownRequired = "Sch_UnknownRequired";
		public const string Sch_UnparsedEntityRef = "Sch_UnparsedEntityRef";
		public const string Sch_UnrefNS = "Sch_UnrefNS";
		public const string Sch_UnresolvedKeyref = "Sch_UnresolvedKeyref";
		public const string Sch_UnresolvedPrefix = "Sch_UnresolvedPrefix";
		public const string Sch_UnsupportedAttribute = "Sch_UnsupportedAttribute";
		public const string Sch_UnsupportedElement = "Sch_UnsupportedElement";
		public const string Sch_ValidateAttributeInvalidCall = "Sch_ValidateAttributeInvalidCall";
		public const string Sch_ValidateElementInvalidCall = "Sch_ValidateElementInvalidCall";
		public const string Sch_WhiteSpaceFacetProhibited = "Sch_WhiteSpaceFacetProhibited";
		public const string Sch_WhiteSpaceRestriction1 = "Sch_WhiteSpaceRestriction1";
		public const string Sch_WhiteSpaceRestriction2 = "Sch_WhiteSpaceRestriction2";
		public const string Sch_XSDSchemaOnly = "Sch_XSDSchemaOnly";
		public const string Sch_XSDSchemaRootExpected = "Sch_XSDSchemaRootExpected";
		public const string Sch_XmlNsAttribute = "Sch_XmlNsAttribute";
		public const string Sch_XmlSpace = "Sch_XmlSpace";
		public const string Sch_XmlTypeHasFraction = "Sch_XmlTypeHasFraction";
		public const string Sch_XsdDateTimeCompare = "Cannot compare '{0}' and '{1}'.";
		public const string Sch_XsiNilAndFixed = "Sch_XsiNilAndFixed";
		public const string Sch_XsiNilAndType = "Sch_XsiNilAndType";
		public const string Sch_XsiTypeAbstract = "Sch_XsiTypeAbstract";
		public const string Sch_XsiTypeBlockedEx = "Sch_XsiTypeBlockedEx";
		public const string Sch_XsiTypeNotFound = "Sch_XsiTypeNotFound";
		public const string SchemaSyntaxErrorDetails = "SchemaSyntaxErrorDetails";
		public const string SchemaValidationWarning = "SchemaValidationWarning";

		public static string GetString (string s, params object [] args)
		{
			return args == null ? s : string.Format (s, args);
		}
	}
}
